#ifndef JOJOMINISHELL_H
# define JOJOMINISHELL_H

#include "exec/minishell.h"
#include "parse/jojo_libft/libft.h"
#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <stdbool.h>


// << = 256
// >> = 255

typedef struct s_token
{
	char	**stokens;
	char	**dtokens;
}	t_token;

typedef struct s_outfile
{
	char				*token;
	char				*file;
	struct s_outfile	*next;
}	t_outfile;

typedef struct s_infile
{
	char 			*token;
	char			*file;
	struct s_infile	*next;
}	t_infile;

typedef struct s_os_envs{
	char **linux_envs;
	struct s_os_envs *next;
}   t_os_envs;

int		is_builtin(char *cmd);
void	builtin_cd(char *path);
void	builtin_pwd(void);
void	builtin_env(void);
void	builtin_exit(char **args);
int exec_builtin(char *cmd, char **args);
void print_env_list(void);
t_os_envs **get_env_list(void);
void builtin_export(char **args);
void builtin_unset(char **args);
char *aspas(char *str);
void    handle_sigint(int sig);


typedef struct s_cmds
{
	char			**cmd;
	t_infile		*infiles;
	t_outfile		*outfiles;
	struct s_cmds	*next;
}	t_cmds;

typedef struct s_binary
{
	t_type			type;
	int				sublvl;
	int				left_ret;
	int				right_ret;
	int				subshell_ret;
	char			**mat;
	char			**env;
	t_cmds			*cmds;
	struct s_binary	*up;
	struct s_binary	*left;
	struct s_binary	*right;
	struct s_binary	*subshell;
}	t_binary;

t_binary	*btree(void);
int			parsing(char *str);
void 		init_tree(char **mat);

char *aspas(char *str);
int is_builtin(char *cmd);
void builtin_cd(char *path);
void builtin_pwd(void);
void builtin_echo(char **args);
void	builtin_exit(char **args);
void builtin_unset(char **args);
int exec_builtin(char *cmd, char **args);
void builtin_export(char **args);
void print_env_list(void);
t_os_envs **get_env_list(void);
void builtin_env(void);
void exec_path(char *cmd, char **args, char **envp);
int exec_tree(t_binary *tree);
int    exec_pipes(t_cmds *cmd, char **env);
void	exec_redirections(t_cmds *cmd);
int has_redir(t_cmds *cmd);
void free_matrix(char **table);
char **array_to_exec(t_cmds *cmd);

void		binary_clear(t_binary *binary);
void		cmds_clear(t_cmds *cmds);
void		outfile_clear(t_outfile *outfile);
void		infile_clear(t_infile *infile);

t_binary	*binary_new(int shlvl, t_type type, t_binary *up, t_cmds *table);
t_cmds		*cmds_new(t_outfile *outfile, t_infile *infile, char **cmd);
t_outfile	*outfile_new(char *file, char *token);
t_infile	*infile_new(char *file, char *token);

void	create_binary_tree(char **mat, int	shlvl, t_binary *tree);
t_outfile	*get_outfile(char **mat);
int	find_pipe(char **mat);
t_cmds	*get_cmds(char **mat);
void	create_binary_tree(char **mat, int	shlvl, t_binary *tree);
void	create_binary_lvl(char **mat, int id, t_binary *tree);

// future libft.h
void	ft_matrix_uni(char **dest, char **src);
char	*ft_matnstr(char **matrix, char *s, int n);

void	print_files(t_infile	*file);

void	get_here_doc(char *eof, int fd[2]);
char	*expand(char *str);
char	*expand_aux(char *str, int ind, int count);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/05 08:19:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/24 11:24:49 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../my_libft/libft.h"

char	*get_here_doc(char *limiter)
{
	char	*str;
	char	*temp;

	str = NULL;
	temp = get_next_line(0);
	while (ft_strncmp(temp, limiter, ft_strlen(temp) - 1))
	{
		str = ft_strjoin_free(str, temp, 3);
		temp = get_next_line(0);
	}
	free(temp);
	return (str);
}

void	get_file(char *file, int wr)
{
	int		fd;
	char	*str;

	fd = open(file, O_RDONLY);
	if (fd > 0)
	{
		str = get_next_line(fd);
		while (str)
		{
			ft_putstr_fd(str, wr);
			free (str);
			str = get_next_line(fd);
		}
		close(fd);
	}
}

int	feed_file_into_pipe(int *fd, char **av, int to_close)
{
	int		id;
	char	*str;

	str = NULL;
	id = fork();
	if (id < 0)
		return (perror(strerror(errno)), exit(errno), 0);
	if (id == 0)
	{
		if (to_close > 0)
			close(to_close);
		if (ft_strncmp(av[0], "here_doc", 9))
			get_file(av[1], fd[1]);
		else
		{
			str = get_here_doc(av[1]);
			ft_putstr_fd(str, fd[1]);
			free(str);
		}
		close(fd[0]);
		close(fd[1]);
		exit(0);
	}
	return (ft_strncmp(av[0], "here_doc", 9) && access(av[1], R_OK));
}

int	main(int ac, char **av, char **ev)
{
	t_pipex	data;

	data.fd[2] = check_input(&ac, &av, ev);
	if (pipe(data.fd) < 0)
		return (perror(strerror(errno)), close(data.fd[2]), errno);
	data.ind = 1 + feed_file_into_pipe(data.fd, av, data.fd[2]);
	while (++data.ind < ac - 2)
		data.id = pipe_into_pipe(av[data.ind], ev, data.fd, data.fd[2]);
	close(data.fd[1]);
	if ((check_one_cmd(av[ac - 2], ev, NULL, 1) == 0) && data.fd[2] > 0)
	{
		data.id = fork();
		if (data.id < 0)
			return (perror(strerror(errno)), exit(errno), 0);
		if (data.id == 0)
			rdwr_frm_int_fd(av[ac - 2], ev, data.fd[0], data.fd[2]);
	}
	while (--data.ind)
		wait(NULL);
	if (data.fd[2] > 0)
		close(data.fd[2]);
	close(data.fd[0]);
	data.ind = (check_one_cmd(av[ac - 2], ev, NULL, 1) != 0) * 127;
	return (data.ind * (data.fd[2] > 0) + (data.fd[2] < 0));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_func.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 06:38:48 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/23 10:36:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../my_libft/libft.h"

void	rdwr_frm_int_fd(char *cmd_path_inc, char **env, int rd, int wr)
{
	char	**cmd;
	int		value;
	int		ind;
	char	*path;

	dup2(rd, 0);
	dup2(wr, 1);
	cmd = pipex_split(cmd_path_inc, NULL, 0, 0);
	if (*env == NULL || ft_wrdchr(cmd_path_inc, '/'))
		return (execve(cmd_path_inc, cmd, env), close(wr), \
			ft_free_matrix(cmd), close(rd), exit(0));
	env = ft_split(ft_strnmat(env, "PATH=", 5) + 5, ':');
	cmd_path_inc = ft_strjoin("/", *cmd);
	value = 1;
	ind = -1;
	while (env[++ind] && value)
	{
		path = ft_strjoin(env[ind], cmd_path_inc);
		value = execve(path, cmd, env);
		free(path);
	}
	ft_free_matrix(env);
	ft_free_matrix(cmd);
	return (close(rd), close(wr), free(cmd_path_inc), exit(0));
}

int	pipe_into_pipe(char *av, char **env, int *fd, int to_close)
{
	int	fd2[2];
	int	id;

	if (pipe(fd2))
		return (perror(strerror(errno)), exit(errno), 0);
	id = fork();
	if (id < 0)
		return (perror(strerror(errno)), exit(errno), 0);
	close (fd[1]);
	if (id == 0)
	{
		close(fd[1]);
		close(fd2[0]);
		if (to_close > 0)
			close(to_close);
		rdwr_frm_int_fd(av, env, fd[0], fd2[1]);
	}
	close (fd[0]);
	dup2 (fd2[0], fd[0]);
	dup2 (fd2[1], fd[1]);
	close (fd2[0]);
	close (fd2[1]);
	return (id);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_input.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42lisba.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 08:22:04 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/24 11:58:14 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../my_libft/libft.h"

int	check_one_cmd(char *str, char **env, char **cmd, int value)
{
	char	*cmd_path;
	int		ind;

	if (ft_wrdchr(str, '/') || *env == NULL)
		return (access(str, X_OK));
	env = ft_split(ft_strnmat(env, "PATH=", 5) + 5, ':');
	if (env == NULL)
		return (1);
	cmd = pipex_split(str, NULL, 0, 0);
	if (cmd == NULL)
		return (ft_free_matrix(env), 1);
	str = ft_strjoin("/", *cmd);
	if (str == NULL)
		return (ft_free_matrix(cmd), ft_free_matrix(env), 1);
	ind = -1;
	while (env[++ind] && value)
	{
		cmd_path = ft_strjoin (env[ind], str);
		if (cmd_path == NULL)
			return (free(str), ft_free_matrix(env), ft_free_matrix(cmd), 1);
		value = access(cmd_path, X_OK);
		free(cmd_path);
	}
	return (free (str), ft_free_matrix(cmd), ft_free_matrix(env), value);
}

int	full_access(char *file)
{
	int	fd;

	if (access(file, W_OK) == 0)
		return (0);
	fd = open(file, O_WRONLY | O_CREAT);
	if (fd > 0)
	{
		close (fd);
		unlink (file);
		return (0);
	}
	return (1);
}

void	check_all_cmd(int ac, char **av, char **env)
{
	int	ind;
	int	value;

	if (ft_strncmp(av[0], "here_doc", 9) && (access(av[1], R_OK)))
		perror(av[1]);
	ind = 1 + (access(av[1], R_OK) != 0);
	while (av[++ind + 1 - (full_access(av[ac - 1]))])
	{
		if (ft_wrdchr(av[ind], '/') || *env == NULL || ft_emptystr(av[ind]))
			value = access(av[ind], X_OK);
		else
			value = check_one_cmd(av[ind], env, NULL, 1);
		if (value == 1)
			return (ft_putstr_fd("memory error\n", 2), exit(errno));
		else if (value == -1 && ft_wrdchr(av[ind], '/'))
			perror(av[ind]);
		else if (value == -1)
		{
			ft_putstr_fd(av[ind], 2);
			ft_putstr_fd(": command not found\n", 2);
		}
	}
}

int	check_input(int *ac, char ***av, char **env)
{
	int	fd;

	if (*ac < 2)
	{
		ft_putendl_fd("invalid number of arguments", 2);
		exit(0);
	}
	(*ac) -= (ft_strncmp((*av)[1], "here_doc", 9) == 0);
	(*av) += (ft_strncmp((*av)[1], "here_doc", 9) == 0);
	if (*ac < 5)
	{
		ft_putendl_fd("invalid number of arguments", 2);
		exit(0);
	}
	check_all_cmd(*ac, *av, env);
	if (ft_strncmp((*av)[0], "here_doc", 9))
		fd = open((*av)[*ac - 1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
	else
		fd = open((*av)[*ac - 1], O_WRONLY | O_APPEND | O_CREAT, 0644);
	if (fd < 0)
		perror((*av)[*ac - 1]);
	return (fd);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_bonus.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/05 08:19:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/24 11:24:43 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../my_libft/libft.h"

char	*get_here_doc(char *limiter)
{
	char	*str;
	char	*temp;

	str = NULL;
	temp = get_next_line(0);
	while (ft_strncmp(temp, limiter, ft_strlen(temp) - 1))
	{
		str = ft_strjoin_free(str, temp, 3);
		temp = get_next_line(0);
	}
	free(temp);
	return (str);
}

void	get_file(char *file, int wr)
{
	int		fd;
	char	*str;

	fd = open(file, O_RDONLY);
	if (fd > 0)
	{
		str = get_next_line(fd);
		while (str)
		{
			ft_putstr_fd(str, wr);
			free (str);
			str = get_next_line(fd);
		}
		close(fd);
	}
}

int	feed_file_into_pipe(int *fd, char **av, int to_close)
{
	int		id;
	char	*str;

	str = NULL;
	id = fork();
	if (id < 0)
		return (perror(strerror(errno)), exit(errno), 0);
	if (id == 0)
	{
		if (to_close > 0)
			close(to_close);
		if (ft_strncmp(av[0], "here_doc", 9))
			get_file(av[1], fd[1]);
		else
		{
			str = get_here_doc(av[1]);
			ft_putstr_fd(str, fd[1]);
			free(str);
		}
		close(fd[0]);
		close(fd[1]);
		exit(0);
	}
	return (ft_strncmp(av[0], "here_doc", 9) && access(av[1], R_OK));
}

int	main(int ac, char **av, char **ev)
{
	t_pipex	data;

	data.fd[2] = check_input(&ac, &av, ev);
	if (pipe(data.fd) < 0)
		return (perror(strerror(errno)), close(data.fd[2]), errno);
	data.ind = 1 + feed_file_into_pipe(data.fd, av, data.fd[2]);
	while (++data.ind < ac - 2)
		data.id = pipe_into_pipe(av[data.ind], ev, data.fd, data.fd[2]);
	close(data.fd[1]);
	if ((check_one_cmd(av[ac - 2], ev, NULL, 1) == 0) && data.fd[2] > 0)
	{
		data.id = fork();
		if (data.id < 0)
			return (perror(strerror(errno)), exit(errno), 0);
		if (data.id == 0)
			rdwr_frm_int_fd(av[ac - 2], ev, data.fd[0], data.fd[2]);
	}
	while (--data.ind)
		wait(NULL);
	if (data.fd[2] > 0)
		close(data.fd[2]);
	close(data.fd[0]);
	data.ind = (check_one_cmd(av[ac - 2], ev, NULL, 1) != 0) * 127;
	return (data.ind * (data.fd[2] > 0) + (data.fd[2] < 0));
}
#include "../../sigma_minishell.h"


int is_builtin(char *cmd)
{
    if (ft_strncmp(cmd, "cd", 2) == 0)
        return (1);
    if (ft_strncmp(cmd, "pwd", 3) == 0)
        return (1);
    if (ft_strncmp(cmd, "env", 3) == 0)
        return (1);
    if (ft_strncmp(cmd, "echo", 4) == 0)
        return (1);
    if (ft_strncmp(cmd, "exit", 4) == 0)
        return (1);
    if (ft_strncmp(cmd, "unset", 5) == 0)
        return (1);
    if (ft_strncmp(cmd, "export", 6) == 0)
        return (1);
    return (0);
}

void builtin_cd(char *path) 
{
    if (path == NULL || path[0] == '\0') 
    {
        if (chdir(getenv("HOME")) != 0) 
            perror("cd");
    }
    else if (chdir(path) != 0) 
        perror("cd");
}

void builtin_pwd(void)
{
    char buf[1024];
    if (getcwd(buf, sizeof(buf)) == NULL)
        perror("pwd");
    else
        ft_putstr_fd(buf, 1);
}

void builtin_echo(char **args)
{
    int i;
    char *cleaned;

    i = 1;
    if (args[1] && ft_strncmp(args[1], "-n", 2) == 0)
        i++;
    while (args[i])
    {
        cleaned = aspas(args[i]);
        ft_putstr_fd(cleaned, 1);
        free(cleaned);
        if (args[i + 1] != NULL)
            write(1, " ", 1);
        i++;
    }
    if (!(args[1] && ft_strncmp(args[1], "-n", 2) == 0))
        write(1, "\n", 1);
}

void    builtin_exit(char **args)
{
    int status;

    status = 0;
    if (args[1])
        status = ft_atoi(args[1]);
    exit (status);
}

int exec_builtin(char *cmd, char **args)
{
    if (ft_strncmp(cmd, "cd", 2) == 0)
            builtin_cd(args[1]);
    else if (ft_strncmp(cmd, "pwd", 3) == 0)
        builtin_pwd();
    else if (ft_strncmp(cmd, "env", 3) == 0)
        print_env_list();
    else if (ft_strncmp(cmd, "echo", 4) == 0)
        builtin_echo(args);
    else if (ft_strncmp(cmd, "exit", 4) == 0)
        builtin_exit(args);
    else if (ft_strncmp(cmd, "unset", 5) == 0)
        builtin_unset(args);
    else if (ft_strncmp(cmd, "export", 6) == 0)
        builtin_export(args);
    else
        return (0);
    return (0);
}

#include "../../sigma_minishell.h"

static int make_update_env(const char *str)
{
    t_os_envs **env_list = get_env_list();
    t_os_envs *current = *env_list;
    size_t name_len = ft_strchr(str, '=') ? (size_t)(ft_strchr(str, '=') - str) : strlen(str);

    while (current)
    {
        if ((ft_strncmp(current->linux_envs[0], str, name_len) == 0)
            && current->linux_envs[0][name_len] == '=')
        {
            char *new_var = ft_strdup(str);
            if (!new_var)
                return (-1);
            free(current->linux_envs[0]);
            current->linux_envs[0] = new_var;
            return (0);
        }
        current = current->next;
    }

    t_os_envs *new_node = malloc(sizeof(t_os_envs));
    if (!new_node)
        return (-1);
    new_node->linux_envs = malloc(sizeof(char *) * 2);
    if (!new_node->linux_envs)
        return (free(new_node), -1);
    new_node->linux_envs[0] = ft_strdup(str);
    if (!new_node->linux_envs[0])                // <-- FIXED here!
        return (free(new_node->linux_envs), free(new_node), -1);
    new_node->linux_envs[1] = NULL;
    new_node->next = NULL;
    if (!*env_list)
        *env_list = new_node;
    else
    {
        current = *env_list;
        while (current->next)
            current = current->next;
        current->next = new_node;
    }
    return (0);
}


void builtin_export(char **args)
{
    if (!args[1])
    {
        print_env_list();
        return;
    }

    for (int i = 1; args[i]; i++)
    {
        if (!strchr(args[i], '=')) {
            fprintf(stderr, "minishell: export: `%s': not a valid identifier\n", args[i]);
            continue;
        }
        if (make_update_env(args[i]) < 0)
            perror("minishell: export");
    }
}
#include "../../sigma_minishell.h"

void builtin_unset(char **args)
{
    t_os_envs **env_list = get_env_list();
    t_os_envs *cur;
    t_os_envs *prev;
    size_t name_len;

    if (!args[1])
        return;
    for (int i = 1; args[i]; i++)
    {
        name_len = strlen(args[i]);

        prev = NULL;
        cur = *env_list;
        while (cur)
        {
            if (strncmp(cur->linux_envs[0], args[i], name_len) == 0
                && cur->linux_envs[0][name_len] == '=')
            {
                // found the node
                if (prev)
                    prev->next = cur->next;
                else
                    *env_list = cur->next;

                free(cur->linux_envs[0]);
                free(cur->linux_envs);
                free(cur);
                break;
            }
            prev = cur;
            cur = cur->next;
        }
    }
}
#include "../../sigma_minishell.h"


t_os_envs **get_env_list(void)
{
    static t_os_envs *env_list = NULL;
    return &env_list;
}

static t_os_envs *create_env_node(char *path)
{
    t_os_envs *new_node = malloc(sizeof(t_os_envs));
    if (!new_node)
        return NULL;
    
    new_node->linux_envs = malloc(sizeof(char *) * 2);
    if (!new_node->linux_envs)
        return (free(new_node), NULL);
    
    new_node->linux_envs[0] = ft_strdup(path);
    new_node->linux_envs[1] = NULL;
    new_node->next = NULL;
    
    if (!new_node->linux_envs[0])
        return (free(new_node->linux_envs), free(new_node), NULL);
    
    return new_node;
}

void clear_env_list(void)
{
    t_os_envs **env_list = get_env_list();
    t_os_envs *current = *env_list;
    t_os_envs *next;

    while (current) {
        next = current->next;
        free(current->linux_envs[0]);
        free(current->linux_envs);
        free(current);
        current = next;
    }
    *env_list = NULL;
}

void print_env_list(void)
{
    t_os_envs *current = *get_env_list();
    while (current) {
        ft_putstr_fd(current->linux_envs[0], 1);
        current = current->next;
    }
}

void builtin_env(void)
{
    extern char **environ;
    t_os_envs **env_list = get_env_list();
    t_os_envs *new_node;
    char **env_var = environ;

    clear_env_list();
    while (*env_var)
    {
        new_node = create_env_node(*env_var);
        if (!new_node)
        {
            perror("minishell: env");
            return;
        }
        
        if (*env_list == NULL)
            *env_list = new_node;
        else
        {
            t_os_envs *last = *env_list;
            while (last->next)
                last = last->next;
            last->next = new_node;
        }
        env_var++;
    }
}#include "../../sigma_minishell.h"
#include <readline/readline.h>


int count_it(char *str, int c)
{
	int i = 0;
	int count = 0;
	if (!str)
		return (0);
	while (str[i])
	{
		if (str[i] == c)
			count++;
		i++;
	}
	return (count);
}

char *remove_it(char *str, int c)
{
    int i = 0;
    int j = 0;
	if (!str)
		return (NULL);
    int count = count_it(str, c);
    char *removed = malloc(ft_strlen(str) + 1 - count);
    if (!removed)
        return (NULL);

    while (str[i])
    {
        if (str[i] != c)
        {
            removed[j] = str[i];
            j++;
        }
        i++;
    }
    removed[j] = '\0';
    return (removed);
}

void odd_aspas(char *str, char c)
{
	int count;
	count = count_it(str, c);
	if (count % 2 == 1)
	{
		while (1)
		{
			char *input = readline(">");
			if (!input)
				continue ;
			if (input[0] == c)
			{
				free(input);
				break ;
			}
			free(input);
		}
	}
}

char *aspas(char *str)
{
	if (!str)
		return (NULL);
	char *final_str = remove_it(str, '"');
	odd_aspas(str, '"');
	return (final_str);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:22:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:11 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*ret;
	size_t	count;
	size_t	s_len;

	if (s == NULL)
		return (NULL);
	s_len = ft_strlen((char *)s);
	if (s_len < start)
		return (ft_calloc(1, 1));
	count = -1;
	if (len > s_len - start)
		ret = (char *)ft_calloc(s_len - start + 1, 1);
	else
		ret = (char *)ft_calloc(len + 1, 1);
	if (ret == NULL)
		return (NULL);
	while (++count < len && s[start + count])
		ret[count] = s[start + count];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_wrdchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/21 16:40:04 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/21 16:40:46 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_wrdchr(const char *s, int c)
{
	char	*temp;

	temp = (char *)s;
	while (*temp != (char)c && *temp && *temp != ' ')
		temp++;
	if (*temp == (char)c)
		return (temp);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:44:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (2048);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:21:27 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:56 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void*))
{
	t_list		*temp;
	int			count;
	int			sub_count;

	if (lst == NULL || *lst == NULL || del == NULL)
		return ;
	count = ft_lstsize (*lst);
	while (count-- > 0)
	{
		temp = *lst;
		sub_count = count;
		while (sub_count-- > 0)
			temp = temp->next;
		ft_lstdelone(temp, del);
	}
	*lst = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/22 12:14:12 by jlima-so          #+#    #+#             */
/*   Updated: 2025/07/25 15:17:49 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_atoi(const char *str)
{
	int	sign;
	int	num;

	sign = 1;
	num = 0;
	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	if (*str == '+' || *str == '-')
	{
		if (*str == '-')
			sign = -sign;
		str++;
	}
	while (*str >= '0' && *str <= '9')
	{
		num = num * 10 + (*str - 48) * (sign);
		str++;
	}
	return (num);
}

// int main()
// {
// 	char * str = "  \n\t\v\r2147483648";
// 	printf("Og return %d\n", atoi(str));
// 	printf("My return %d", ft_atoi(str));		

// }
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 18:59:24 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:14 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		c = c + 32;
	return (c);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:18:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:07:01 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	size_t	ind;

	ind = -1;
	if (dest > src)
		while (n-- > 0)
			((char *)dest)[n] = ((char *)src)[n];
	else
		while (++ind < n)
			((char *)dest)[ind] = ((char *)src)[ind];
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:07:57 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:26 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_lstsize(t_list *lst)
{
	int	size;

	size = 0;
	while (lst != NULL)
	{
		size++;
		lst = lst->next;
	}
	return (size);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 13:50:55 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:54 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_str_count(char *str, char c)
{
	int	ind;
	int	count;

	count = 0;
	ind = 0;
	while (str[ind])
	{
		if (str[ind] != c && (str[ind + 1] == '\0'
				|| str[ind + 1] == c))
			count++;
		ind++;
	}
	return (count);
}

static char	*ft_split_strndup(const char *s, char c)
{
	char	*src;
	char	*dest;
	int		size;

	size = 0;
	while (s[size])
	{
		if (s[size] == c)
			break ;
		size++;
	}
	if (s == NULL)
		return (NULL);
	src = (char *)s;
	dest = ft_calloc(size + 1, 1);
	if (dest == NULL)
		return (NULL);
	ft_bzero(dest, size + 1);
	dest = ft_memcpy(dest, src, size);
	return (dest);
}

static void	*free_all(char **strs, int count)
{
	int	ind;

	ind = -1;
	while (++ind < count)
		free (strs[ind]);
	free (strs);
	return (NULL);
}

static char	**alloc_mem(int str_count)
{
	char	**ret;

	ret = ft_calloc((str_count + 1) * sizeof(char *), 1);
	if (ret == NULL)
		return (NULL);
	ret[str_count] = NULL;
	return (ret);
}

char	**ft_split(char const *s, char c)
{
	char	**ret;
	char	*str;
	int		str_count;
	int		indv;

	if (s == NULL)
		return (NULL);
	indv = 0;
	str = (char *)s;
	str_count = ft_str_count(str, c);
	ret = alloc_mem(str_count);
	if (ret == NULL)
		return (NULL);
	while (str_count-- > 0)
	{
		while (*str == c && *str)
			str++;
		ret[indv] = ft_split_strndup(str, c);
		if (ret[indv] == NULL && indv != str_count)
			return (free_all(ret, indv));
		indv++;
		while (*str != c && *str)
			str++;
	}
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:32:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/18 18:13:24 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*ret;

	if (s1 == NULL && s2 == NULL)
		return (NULL);
	if (s1 == NULL)
		return (ft_strdup(s2));
	if (s2 == NULL)
		return (ft_strdup(s1));
	ret = ft_calloc(ft_strlen((char *)s1) + ft_strlen((char *)s2) + 1, 1);
	if (ret == NULL)
		return (NULL);
	ret = ft_strcpy(ret, (char *)s1);
	ret = ft_strcat(ret, (char *)s2);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:27:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:39 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	if (-9 < n && n < 0)
		write (fd, "-", 1);
	if (n < -9 || n > 9)
		ft_putnbr_fd(n / 10, fd);
	n = (n % 10) * ((n > 0) - (n < 0)) + 48;
	write (fd, &n, 1);
}
// int main()
// {
// 	ft_putnbr_fd(-2147483648, 1);
// }/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_split.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 19:06:25 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/20 06:39:52 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	real_wrd_count(char *str, int ind, int count)
{
	while (*str)
	{
		ind = 0;
		while (*str && *str == ' ')
			str++;
		if (*str && *str != '\'')
		{
			while (*str && *str != ' ' && *str != '\'')
				str++;
			count++;
		}
		if (*str && *str == '\'')
		{
			str++;
			while (*str && *str != '\'')
			{
				str++;
				ind = 1;
			}
			if (ind)
				count++;
			str++;
		}
	}
	return (count);
}

static int	wrd_count(char *str)
{
	int	ind;
	int	count;

	if (str == NULL)
		return (0);
	ind = -1;
	count = 0;
	while (str[++ind])
		if (str[ind] == '\'')
			count++;
	if (count % 2)
		return (0);
	count = real_wrd_count(str, ind, 0);
	return (count);
}

static int	next_str(char *str)
{
	int	ind;
	int	space;

	space = 0;
	ind = 0;
	if (str[ind] != '\'')
		while (str[ind] && str[ind] != ' ' && str[ind] != '\'')
			ind++;
	else if (str[ind] == '\'' && str[ind++])
	{
		while (str[ind] != '\'' && str[ind])
		{
			if (space == -1 && str[ind] == ' ')
				space = ind;
			ind++;
		}
		ind++;
		if (str[ind - 1] != '\'')
			ind = space;
	}
	return (ind);
}

static	char	**create_empty_mat(void)
{
	char	**ret;

	ret = malloc(2 * sizeof(char *));
	ret[1] = NULL;
	ret[0] = malloc(1);
	ret[0][0] = '\0';
	return (ret);
}

char	**pipex_split(char *str, char **ret, int count, int loop)
{
	int	ind;

	if (count == 0)
		count = wrd_count(str);
	if (count == 0)
		return (create_empty_mat());
	if (ret == NULL && loop == 0)
		ret = malloc((count + 1) * sizeof(char *));
	if (ret == NULL && loop == 0)
		return (NULL);
	ret[count - loop] = NULL;
	if (count == loop)
		return (ret);
	while (*str == ' ' && str)
		str++;
	ind = next_str(str) - ((*str == '\''));
	str += (*str == '\'');
	*ret = ft_strndup(str, ind - (ind - 1 > 0 && (str[ind - 1] == '\'')));
	if (*ret == NULL)
		return (ft_free_matrix_count(ret - loop, loop), NULL);
	while (*str == ' ' && str)
		str++;
	pipex_split (str + ind, ret + 1, count, loop + 1);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcat.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:43:03 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:58 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strcat(char *dest, char *src)
{
	int	ind;
	int	ind2;

	if (dest == NULL)
		return (NULL);
	ind = -1;
	ind2 = ft_strlen(dest);
	if (src == NULL)
		return (dest);
	while (src[++ind] != '\0')
		dest[ind2++] = src[ind];
	dest[ind2] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:35:53 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:31 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1024);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_free_matrix.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:46:11 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/09 21:03:20 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_free_matrix(char **matrix)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		free(matrix[ind]);
	free (matrix);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:58:22 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:15 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*ret;
	size_t	ind;

	ind = -1;
	if (nmemb == 0 || size == 0 || ind / nmemb >= size)
	{
		ret = malloc(size * nmemb);
		if (ret == NULL)
			return (0);
		ind = 0;
		ft_bzero(ret, size * nmemb);
		return (ret);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strndup.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 19:03:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strndup(char *str, int ind)
{
	char	*ret;

	if (str == NULL)
		return (NULL);
	ret = ft_calloc (ind + 1, 1);
	while (ind--)
		ret[ind] = str[ind];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:20:24 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:34 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	unsigned char	*str;
	unsigned char	chr;

	str = (unsigned char *)s;
	chr = (unsigned char)c;
	while (n-- > 0)
	{
		if (*str == chr)
			return (str);
		str++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 13:53:00 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strdup(const char *s)
{
	char	*src;
	char	*dest;
	int		size;

	src = (char *)s;
	size = ft_strlen(src);
	dest = ft_calloc(size + 1, 1);
	if (dest == NULL)
		return (NULL);
	dest = ft_memcpy(dest, src, size);
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:01:11 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	int		ind;
	char	*ret;

	if (s == NULL || f == NULL)
		return (NULL);
	ret = (char *)ft_calloc(ft_strlen((char *)s) + 1, 1);
	if (ret == NULL)
		return (NULL);
	ind = -1;
	while (s[++ind])
		ret[ind] = f(ind, s[ind]);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:58:30 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 12:47:33 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t			ind;
	unsigned char	*str1;
	unsigned char	*str2;

	if (n == 0)
		return (1);
	str1 = (unsigned char *)s1;
	str2 = (unsigned char *)s2;
	ind = 0;
	while (str1[ind] && str2[ind] && str1[ind] == str2[ind] && ind < n - 1)
		ind++;
	return (str1[ind] - str2[ind]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 14:50:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:55 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t	ind;

	ind = -1;
	while (++ind < n)
		((char *)dest)[ind] = ((char *)src)[ind];
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmat.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 15:20:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:40 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strmat(char **matrix, char *s)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strstr(matrix[ind], s))
			return (matrix[ind]);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 15:09:25 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_nrblrn(int nbr)
{
	int	len;

	len = 1;
	while (-9 > nbr || nbr > 9)
	{
		nbr = nbr / 10;
		len++;
	}
	return (len);
}

char	*ft_itoa(int n)
{
	char	*ret;
	int		size;

	size = ft_nrblrn(n);
	if (n >= 0)
		ret = ft_calloc (size + 1, 1);
	else
		ret = ft_calloc (size + 2, 1);
	if (ret == NULL)
		return (NULL);
	if (n < 0)
	{
		ret[0] = '-';
		ret[size] = -(n % 10) + 48;
		n = -(n / 10);
	}
	while (--size >= 0 && ret[size] != '-')
	{
		ret[size] = n % 10 + 48;
		n = n / 10;
	}
	return (ret);
}
/* 
int main()
{
	printf("\n ft_itoa:\n");
// 
	printf("\t%s\n", ft_itoa(-123456));
	printf("\t%s\n", ft_itoa(-2147483648));
	printf("\t%s\n", ft_itoa(2147483647));
	printf("\t%s\n", ft_itoa(10));
	printf("\t%s\n", ft_itoa(0));	
} *//* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:12:05 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:48 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*temp;

	if (lst == NULL || new == NULL)
		return ;
	if (*lst == NULL)
		*lst = new;
	else
	{
		temp = *lst;
		while (temp->next != NULL)
			temp = temp->next;
		temp->next = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_print_matrix.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:21:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/05 22:11:54 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_print_matrix.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 13:52:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/06 13:52:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_print_matrix(char **matrix)
{
	int	indv;
	int	indh;

	if (matrix == NULL)
		return ;
	indv = -1;
	while (matrix[++indv])
	{
		indh = -1;
		while (matrix[indv][++indh])
			write(2, &matrix[indv][indh], 1);
		write(2, "\n", 1);
	}
	// write(2, "\n", 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_matlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 18:49:50 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:28 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_matlen(char **mat)
{
	int	ind;

	if (mat == NULL)
		return (0);
	ind = 0;
	while (mat[ind])
		ind++;
	return (ind);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnmat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 07:29:57 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/05 04:18:08 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strnmat(char **matrix, char *s, int n)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strnstr(s, matrix[ind], n))
			return (matrix[ind]);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:44:33 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:25 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isalnum(int c)
{
	if (ft_isdigit(c) || ft_isalpha(c))
		return (8);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:14:19 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	if (s != NULL)
	{
		write(fd, s, ft_strlen(s));
		write(fd, "\n", 1);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 22:18:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:07 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_check(char ch, const char *charset)
{
	int	ind;

	ind = 0;
	while (charset[ind])
	{
		if (charset[ind] == ch)
			return (1);
		ind++;
	}
	return (0);
}

static int	total_len(const char *str, const char *set)
{
	int	ind;
	int	total;

	total = 0;
	ind = -1;
	while (str[++ind] && ft_check (str[ind], set))
		total++;
	if (str[ind] == '\0')
		return (total);
	ind = ft_strlen(str);
	while (--ind >= 0 && ft_check (str[ind], set))
		total++;
	return (total);
}

char	*ft_strtrim(char const *s1, char const *set)
{
	int		ind;
	int		ind2;
	int		total;
	char	*ret;

	ind = 0;
	ind2 = 0;
	if (s1 == NULL)
		return (NULL);
	if (set == NULL)
		return (ft_strdup((char *)s1));
	total = ft_strlen(s1) - total_len(s1, set);
	ret = ft_calloc(total + 1, 1);
	if (ret == NULL)
		return (NULL);
	while (ft_check(s1[ind], (char *)set) && s1[ind])
		ind++;
	while (s1[ind] && ind2 < total)
		ret[ind2++] = s1[ind++];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 18:57:50 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:33:26 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		c = c - 32;
	return (c);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:08:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:04 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strrchr(const char *s, int c)
{
	int		ind;

	ind = ft_strlen((char *)s) + 1;
	while (ind-- > 0)
		if (s[ind] == (char)c)
			return ((char *)s + ind);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin_free.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:32:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:26 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strjoin_free(char *s1, char *s2, int flag)
{
	char	*ret;

	ret = ft_calloc(ft_strlen((char *)s1) + ft_strlen((char *)s2) + 1, 1);
	if (ret == NULL)
		return (NULL);
	ret = ft_strcpy(ret, (char *)s1);
	ret = ft_strcat(ret, (char *)s2);
	if (flag != 2)
		free (s1);
	if (flag != 1)
		free (s2);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:12:59 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 14:50:39 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	if (s != NULL)
	{
		write(fd, s, ft_strlen(s));
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:43:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strcpy(char *dest, char *src)
{
	int	ind;

	if (dest == NULL)
		return (NULL);
	if (src == NULL)
		return (dest);
	ind = -1;
	while (src[++ind] != '\0')
		dest[ind] = src[ind];
	dest[ind] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strstr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:28:40 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:05 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strstr(const char *big, const char *little)
{
	size_t	indl;
	size_t	indb;

	indb = 0;
	if (big == NULL || little == NULL)
		return (NULL);
	if (*little == '\0')
		return ((char *)big);
	while (big[indb])
	{
		indl = 0;
		while (big[indb + indl] == little[indl])
		{
			indl++;
			if (little[indl] == '\0')
				return ((char *)big + indb);
		}
		indb++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:07:18 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_striteri(char const *s, void (*f)(unsigned int, char *))
{
	int		ind;
	char	*str;

	if (s != NULL && f != NULL)
	{
		str = (char *)s;
		ind = -1;
		while (str[++ind])
			f(ind, str + ind);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:54:26 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:49:24 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_bzero(void *s, size_t n)
{
	while (n-- > 0)
		((char *)s)[n] = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_free_matrix_count.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 18:54:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_free_matrix_count(char **mat, int count)
{
	if (mat == NULL)
		return ;
	while (count--)
		free (mat[count]);
	free(mat);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:49:26 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:41 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (16384);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:05:05 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:04 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strchr(const char *s, int c)
{
	char	*temp;

	temp = (char *)s;
	while (*temp != (char)c && *temp)
		temp++;
	if (*temp == (char)c)
		return (temp);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:29:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*ret;
	t_list	*temp;

	if (lst == NULL || f == NULL || del == NULL)
		return (NULL);
	ret = ft_lstnew(f(lst->content));
	if (ret == NULL)
		return (NULL);
	lst = lst->next;
	while (lst != NULL)
	{
		temp = ft_lstnew(f(lst->content));
		if (temp == NULL)
		{
			ft_lstclear (&ret, del);
			return (NULL);
		}
		ft_lstadd_back(&ret, temp);
		lst = lst->next;
	}
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:27:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (lst == NULL || f == NULL)
		return ;
	while (lst != NULL)
	{
		f(lst->content);
		lst = lst->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:12:23 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:29 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 14:12:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:07:06 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memset(void *s, int c, size_t n)
{
	while (n-- > 0)
		((char *)s)[n] = c;
	return (s);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 16:12:29 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:30 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	ind;
	size_t	dst_len;
	size_t	src_len;

	src_len = ft_strlen(src);
	if (size == 0)
		return (src_len + size);
	dst_len = ft_strlen(dst);
	if (dst_len >= size)
		return (src_len + size);
	ind = 0;
	while (ind + dst_len < size - 1 && src[ind])
	{
		dst[dst_len + ind] = src[ind];
		ind++;
	}
	dst[dst_len + ind] = '\0';
	return (src_len + dst_len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:48:47 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:35 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:01:27 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:53 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (lst == NULL || new == NULL)
		return ;
	if (*lst == NULL)
		*lst = new;
	else
	{
		new->next = *lst;
		*lst = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:52:31 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:35 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlen(const char *s)
{
	size_t	ind;

	ind = 0;
	if (s)
		while (s[ind])
			ind++;
	return (ind);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:57:41 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*new;

	new = malloc(sizeof(t_list));
	if (new == NULL)
		return (NULL);
	new->content = content;
	new->next = NULL;
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:15:44 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:01 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void*))
{
	if (lst == NULL || del == NULL)
		return ;
	del(lst->content);
	free(lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:59:16 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:32 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t size)
{
	size_t	ind;
	size_t	ret;

	ind = 0;
	ret = (ft_strlen((char *)src));
	if (size == 0)
		return (ret);
	while (ind < size - 1 && src[ind])
	{
		dst[ind] = src[ind];
		ind++;
	}
	dst[ind] = '\0';
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:11:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:16 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (lst == NULL)
		return (NULL);
	while (lst->next != NULL)
		lst = lst->next;
	return (lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:28:40 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:00 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	indl;
	size_t	indb;

	indb = 0;
	if (*little == '\0')
		return ((char *)big);
	if (len == 0)
		return (NULL);
	while (big[indb] && indb < len)
	{
		indl = 0;
		while (big[indb + indl] == little[indl] && indb + indl < len)
		{
			indl++;
			if (little[indl] == '\0')
				return ((char *)big + indb);
		}
		indb++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:26:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:50 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_memcmp(const void *str1, const void *str2, size_t n)
{
	size_t			ind;
	unsigned char	*s1;
	unsigned char	*s2;

	s1 = (unsigned char *)str1;
	s2 = (unsigned char *)str2;
	ind = 0;
	if (n == 0)
		return (0);
	while (s1[ind] == s2[ind] && ind < n - 1)
		ind++;
	return (s1[ind] - s2[ind]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_emptstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42lisba.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 11:40:58 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/24 11:42:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_emptystr(const char *str)
{
	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	return (*str == '\0');
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:02:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/08 13:02:58 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include "get_next_line/get_next_line_bonus.h"
# include <stdlib.h>
# include <unistd.h>
# include <stdio.h>
# include <limits.h>
# include <ctype.h>
# include <string.h>
// # include <bsd/string.h>
# include <errno.h>
# include <fcntl.h>
# include <sys/wait.h>
# include <sys/types.h>

typedef struct s_exec
{
	char	*path;
	char	**cmd;
	char	*str;
	int		ind;
	int		check;
	char	**mat;
}				t_exec;

typedef struct s_main
{
	int	fd;
	int	fd2[2];
	int	id;
	int	ind;
}	t_main;

typedef struct s_pipex
{
	int	fd[3];
	int	id;
	int	ind;
}	t_pipex;

char	*ft_itoa(int n);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strrchr(const char *s, int c);
char	*ft_strtrim(char const *s1, char const *set);
char	*ft_strnstr(const char *big, const char *little, size_t len);
char	*ft_strstr(const char *big, const char *little);
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
char	*ft_strjoin(char const *s1, char const *s2);
char	*ft_strdup(const char *s);
char	**ft_split(char const *s, char c);
char	*ft_strchr(const char *s, int c);
void	*ft_memset(void *s, int c, size_t n);
void	*ft_memcpy(void *dest, const void *src, size_t n);
void	*ft_memmove(void *dest, const void *src, size_t n);
void	*ft_memchr(const void *s, int c, size_t n);
void	ft_bzero(void *s, size_t n);
void	ft_putstr_fd(char *s, int fd);
void	ft_putendl_fd(char *s, int fd);
void	ft_putnbr_fd(int n, int fd);
void	ft_putchar_fd(char c, int fd);
void	*ft_calloc(size_t nmemb, size_t size);
size_t	ft_strlen(const char *s);
size_t	ft_strlcpy(char *dst, const char *src, size_t size);
size_t	ft_strlcat(char *dst, const char *src, size_t size);
void	ft_striteri(char const *s, void (*f)(unsigned int, char*));
int		ft_memcmp(const void *str1, const void *str2, size_t n);
int		ft_isprint(int c);
int		ft_isdigit(int c);
int		ft_isascii(int c);
int		ft_isalpha(int c);
int		ft_tolower(int c);
int		ft_toupper(int c);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
int		ft_isalnum(int c);
int		ft_atoi(const char *str);
void	ft_print_matrix(char **matrix);
void	ft_free_matrix(char **matrix);
void	ft_free_matrix_count(char **mat, int count);
char	*ft_strcat(char *dest, char *src);
char	*ft_strcpy(char *dest, char *src);
char	*ft_strnmat(char **matrix, char *s, int n);
char	*ft_strmat(char **matrix, char *s);
char	*ft_strjoin_free(char *s1, char *s2, int flag);
int		ft_matlen(char **mat);
char	*ft_strndup(char *str, int ind);
char	**pipex_split(char *str, char **ret, int count, int loop);
int		pipe_into_pipe(char *av, char **env, int *fd, int to_close);
int		feed_file_into_pipe(int *fd, char **av, int to_close);
int		check_input(int *ac, char ***av, char **env);
int		check_one_cmd(char *str, char **env, char **cmd, int value);
void	rdwr_frm_int_fd(char *cmd_path_inc, char **env, int rd, int wr);
char	*ft_wrdchr(const char *s, int c);
int		ft_emptystr(const char *str);

typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}				t_list;

void	ft_lstadd_front(t_list **lst, t_list *new);
void	ft_lstadd_back(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void*));
void	ft_lstiter(t_list *lst, void (*f)(void *));
t_list	*ft_lstnew(void *content);
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *),
			void (*del)(void *));
t_list	*ft_lstlast(t_list *lst);
int		ft_lstsize(t_list *lst);
void	ft_lstdelone(t_list *lst, void (*del)(void*));
void	adeus(void *content);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils_bonus.c                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 10:42:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:35:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	zero_read(int fd, char *keep)
{
	int	ind;

	ind = read(fd, keep, BUFFER_SIZE);
	if (ind >= 0)
		keep[ind] = '\0';
	return (ind);
}

void	next_lines(char *ret)
{
	int	ind;
	int	add;

	add = ft_gnl_strlen(ret);
	ind = 0;
	while (ret[ind + add] && ret[ind])
	{
		ret[ind] = ret[ind + add];
		ind++;
	}
	if (ret[ind + add] == '\0')
		ret[ind] = '\0';
}

int	ft_gnl_strlen(char *str)
{
	int	ind;

	ind = 0;
	while (str[ind])
	{
		ind++;
		if (str[ind - 1] == '\n')
			return (ind);
	}
	return (ind);
}

char	*ft_gln_strjoin(char *s1, char *s2)
{
	char	*ret;
	int		ind;

	if (s1 == NULL)
	{
		s1 = malloc (1);
		s1[0] = '\0';
	}
	ret = malloc (ft_gnl_strlen(s1) + ft_gnl_strlen(s2) + 1);
	if (ret == NULL)
		return (free (s1), NULL);
	ind = -1;
	while (s1[++ind])
		ret[ind] = s1[ind];
	free (s1);
	while (*s2)
	{
		ret[ind] = *(s2);
		ind++;
		s2++;
		if (*(s2 - 1) == '\n')
			break ;
	}
	ret[ind] = '\0';
	return (ret);
}

int	check(char *str)
{
	while (*str)
	{
		if (*str == '\n')
			return (0);
		str++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.h                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 09:20:52 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/06 16:35:00 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef GET_NEXT_LINE_BONUS_H
# define GET_NEXT_LINE_BONUS_H

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 42
# endif

# include <limits.h> 
# include <fcntl.h> 
# include <unistd.h>
# include <stdio.h>
# include <stdlib.h>

char	*get_next_line(int fd);
char	*ft_gln_strjoin(char *s1, char *s2);
int		zero_read(int fd, char *keep);
void	next_lines(char *ret);
int		ft_gnl_strlen(char *str);
int		check(char *str);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 09:20:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/07/25 15:18:03 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*get_next_line(int fd)
{
	static char	keep[FOPEN_MAX][BUFFER_SIZE + 1];
	char		*ret;
	int			i;

	if (BUFFER_SIZE <= 0 || fd >= FOPEN_MAX || fd < 0)
		return (NULL);
	i = 1;
	if (*keep[fd] == '\0')
		i = zero_read(fd, keep[fd]);
	if (i < 1 && (*keep[fd] == '\0' || !check(keep[fd])))
		return (NULL);
	ret = ft_gln_strjoin(NULL, keep[fd]);
	if (ret == NULL)
		return (NULL);
	while (i && check(ret))
	{
		i = zero_read(fd, keep[fd]);
		if (i < 1)
			break ;
		ret = ft_gln_strjoin(ret, keep[fd]);
		if (ret == NULL)
			return (NULL);
	}
	next_lines(keep[fd]);
	return (ret);
}
#include "../sigma_minishell.h"

char *find_path(char **envp)
{
    int i = 0;
    while (envp[i])
    {
        if (strncmp(envp[i], "PATH=", 5) == 0)
            return (strdup(envp[i] + 5));
        i++;
    }
    return (NULL);
}

char **split_path(char **envp)
{
    char *path = find_path(envp);
    if (!path)
        return (NULL);
    char **vars = ft_split(path, ':');
    free(path);
    return (vars);
}

void exec_path(char *cmd, char **args, char **envp)
{
    char **paths_to_search = split_path(envp);
    if (!paths_to_search)
    {
        write(2, "PATH not found\n", 15);
        exit(1);
    }
    int i = 0;
    while (paths_to_search[i])
    {
        char *full_path = malloc(strlen(paths_to_search[i]) + strlen(cmd) + 2);
        if (!full_path)
        {
            perror("malloc failed");
            exit(1);
        }
        strcpy(full_path, paths_to_search[i]);
        strcat(full_path, "/");
        strcat(full_path, cmd);
        if (access(full_path, X_OK) == 0)
        {
            execve(full_path, args, envp);
            perror("execve failed");
            free(full_path);
            exit(1);
        }
        free(full_path);
        i++;
    }
    i = 0;
    while (paths_to_search[i])
        free(paths_to_search[i++]);
    free(paths_to_search);
    write(2, "command not found\n", 18);
    exit(1);
}

#include "../sigma_minishell.h"

void free_matrix(char **table)
{
    int i = 0;
    if (!table) return;
    while (table[i])
        free(table[i++]);
    free(table);
}
#include "../sigma_minishell.h"
#include <stdio.h>

int is_redir_token(const char *s)
{
	// printf("=======IS_REDIR_TOKEN SENDO RODADA IGUAL SUA MAE\n");
    return (strcmp(s, ">") == 0 || strcmp(s, ">>") == 0
         || strcmp(s, "<") == 0 || strcmp(s, "<<") == 0);
}

int has_redir(t_cmds *cmd)
{
    if (!cmd)
        return 0;
    if (cmd->infiles != NULL || cmd->outfiles != NULL)
        return 1;
    int i = 0;
    while (cmd->cmd && cmd->cmd[i])
    {
        if (is_redir_token(cmd->cmd[i]))
            return 1;
        i++;
    }
    return 0;
}

int count_tokens(t_cmds *cmd)
{
	printf("========COUNTING\n");
    int i = 0, count = 0;
    while (cmd->cmd[i])
    {
        if (is_redir_token(cmd->cmd[i]) && cmd->cmd[i + 1])
            i += 2;
        else {
            count++;
            i++;
        }
    }
    return count;
}

char **array_to_exec(t_cmds *cmd)
{
    int i = 0, j = 0;

    if (!cmd || !cmd->cmd)
        return NULL;
	printf("=======LANCANDO ARRAY TO EXEC\n");
    char **new_argv = malloc(sizeof(char *) * (count_tokens(cmd) + 1));
    if (!new_argv)
        return NULL;
    while (cmd->cmd[i])
    {
        if (is_redir_token(cmd->cmd[i]) && cmd->cmd[i + 1])
            i += 2;
        else
            new_argv[j++] = strdup(cmd->cmd[i++]);
    }
    new_argv[j] = NULL;
    return new_argv;
}

void exec_redirections(t_cmds *cmd)
{
    int i = 0;

    if (!cmd || !cmd->cmd)
        return;
    printf("=====OLA EU SOU EXEC_REDIRECTIONS\n");
    while (cmd->cmd[i])
    {
        printf("=====ESTOU DENTRO DO LOOP DO EXEC_REDIRECTIONS\n");
        if (strcmp(cmd->cmd[i], ">") == 0 && cmd->cmd[i + 1])
        {
            printf("==== ESTOU AQUI PQ O COMAND TEM > COMO REDIRECTION\n");
            int fd = open(cmd->cmd[i + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (fd < 0)
            {
                perror("open >");
                perror("===== ESTOU AQUI PQ O FD E MENOR DO QUE ZERO");
                exit(1);
            }
            if (dup2(fd, STDOUT_FILENO) < 0)
            {
                printf("===== I AM INSIDE IF DUP LINE 80 EXEC REDIRECTIONS\n");
                perror("dup2 >");
                close(fd);
                exit(1);
            }
            close(fd);
            i += 2;
        }
        else if (strcmp(cmd->cmd[i], ">>") == 0 && cmd->cmd[i + 1])
        {
            printf("==== ESTOU AQUI PQ O COMAND TEM >> COMO REDIRECTION\n");
            int fd = open(cmd->cmd[i + 1], O_WRONLY | O_CREAT | O_APPEND, 0644);
            if (fd < 0)
            {
                perror("===== ESTOU AQUI PQ O FD E MENOR DO QUE ZERO PARTE 2");
                perror("open >>");
                exit(1);
            }
            if (dup2(fd, STDOUT_FILENO) < 0)
            {
                printf("===== I AM INSIDE IF DUP LINE 100 EXEC REDIRECTIONS\n");
                perror("dup2 >>");
                close(fd);
                exit(1);
            }
            close(fd);
            i += 2;
        }
        else if (strcmp(cmd->cmd[i], "<") == 0 && cmd->cmd[i + 1])
        {
            int fd = open(cmd->cmd[i + 1], O_RDONLY);
            if (fd < 0)
            {
                perror("open <");
                exit(1);
            }
            if (dup2(fd, STDIN_FILENO) < 0)
            {
                perror("dup2 <");
                close(fd);
                exit(1);
            }
            close(fd);
            i += 2;
        }
        else
            printf("===============AINDA NAO E UMA REDIRECTIONS\n"), i++;
    }
}


// int single_left(t_cmds *cmd)
// {

// }	#include "../sigma_minishell.h"
	#include <stdlib.h>
	#include <sys/wait.h>
	#include <unistd.h>

	int exec_tree(t_binary *tree)
	{
		int ret_left;
		
		if (!tree)
			return (0);
		if (tree->cmds != NULL)
			return (exec_pipes(tree->cmds, tree->env));
		if (tree->type == AND)
		{
			ret_left = exec_tree(tree->left);
			if (ret_left == 0)
				return (exec_tree(tree->right));
			return (ret_left);
		}
		if (tree->type == OR)
		{
			ret_left = exec_tree(tree->left);
			if (ret_left != 0)
				return (exec_tree(tree->right));
			return (exec_tree(tree->left));
		}
		if (tree->subshell != NULL)
		{
			pid_t pid = fork();
			if (pid == 0)
				exit(exec_tree(tree->subshell));
			int status;
			waitpid(pid, &status, 0);
			return (WEXITSTATUS(status));
		}
		return (0);
	}#include "../sigma_minishell.h"

int count_cmds(t_cmds *cmd)
{
	size_t i = 0;
	if (!cmd)
		return (0);
	i++;
	while (cmd->next != NULL)
	{
		i++;
		cmd = cmd->next;
	}	
	return (i);
}

int exec_pipes(t_cmds *cmd, char **env)
{
    int fd[2];
    int first_fd = -1;
    pid_t pid;

    if (!cmd || cmd->cmd[0] == NULL)
        return (0);
	while (cmd)
	{
		if (cmd->next != NULL)
			pipe(fd);

		pid = fork();
		if (pid == 0)
		{
			if (first_fd != -1)
				dup2(first_fd, STDIN_FILENO);
			if (has_redir(cmd))
				exec_redirections(cmd);
			else if (cmd->next != NULL)
				dup2(fd[1], STDOUT_FILENO);
			if (cmd->next != NULL)
			{
				close(fd[0]);
				close(fd[1]);
			}
			if (first_fd != -1)
				close(first_fd);
			char **cleaned_cmd = array_to_exec(cmd);
			if (is_builtin(cleaned_cmd[0]))
				exec_builtin(cleaned_cmd[0], cleaned_cmd);
			else
				exec_path(cleaned_cmd[0], cleaned_cmd, env);
			free_matrix(cleaned_cmd);
			exit(1);
		}
		if (first_fd != -1)
			close(first_fd);
		if (cmd->next != NULL)
		{
			close(fd[1]);
			first_fd = fd[0];
		}
		cmd = cmd->next;
	}

    int status;
    while (wait(&status) > 0);
    return (WEXITSTATUS(status));
}#include "../sigma_minishell.h"

void    handle_sigint(int sig)
{
    (void)sig;
    write(1, "\n", 1);
    rl_on_new_line();
    rl_replace_line("", 0);
    rl_redisplay();
}
#ifndef MINISHELL_H
#define MINISHELL_H

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <fcntl.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <readline/history.h>


typedef enum e_type{
    CMD,
    AND,
    OR,
	EMPTY,
	ERROR
}   t_type;

#endif


#include "sigma_minishell.h"
#include <unistd.h>

t_binary	*btree(void)
{
	static t_binary	tree;

	return (&tree);
}

void	print_cmds(t_cmds *cmds)
{
	int i = 0;
	while (cmds)
	{
		printf("===============================================================\n");
		printf("\t\tstarts infile\n");
		print_files(cmds->infiles);
		printf("\t\tend infile\n");
		printf("\t\tstarts commands\n");
		ft_print_matrix(cmds->cmd);
		printf("\t\tend commands\n");
		printf("\t\tstarts outfiles\n");
		print_files((t_infile *)cmds->outfiles);
		printf("\t\tend outfiles\n");
		printf("===============================================================\n");
		cmds = cmds->next;
	}
}

void	print_tree(t_binary *tree, int sub)
{
	if (sub)
		printf("\nentering subshell\n");
	if (tree == NULL)
		return ;
	print_tree(tree->subshell, 1);
	print_tree(tree->left, 0);
	print_tree(tree->right, 0);
	if (tree->left == NULL && tree->right == NULL)
		if (tree->cmds)
			print_cmds(tree->cmds);
	if (sub)
		printf("\n^exiting shubshell^\n");
}

int	main(int ac, char **av, char **envp)
{
	char	*input;
	t_cmds	*cmds;
	pid_t	pid;

	signal(SIGINT, handle_sigint);
	signal(SIGQUIT, SIG_IGN);
	builtin_env();
	while (1)
	{
		input = readline("minishell$ ");
		if (!input)
			break ;
		add_history(input);
		if (*input == '\0')
		{
			free(input);
			continue ;
		}
		btree()->env = envp;
		parsing(input); // Fills btree()->cmds
		cmds = btree()->cmds;
		if (!cmds || !cmds->cmd || !cmds->cmd[0])
		{
			free(input);
			binary_clear(btree());
			continue ;
		}
		// printf("cmd->cmd = ");
		// int i = 0;
		// while (cmds->cmd[i])
		// {
		//     printf("|%s| ", cmds->cmd[i]);
		//     i++;
		// }
		// printf("\n");
		print_cmds(cmds);
		if (!ft_strchr(input, '|'))
		{
			if (is_builtin(cmds->cmd[0]))
			{
				printf("==IS_BUILTIN 1\n");
				if (has_redir(cmds))
				{
					printf("==HAS_REDIR 1\n");
					pid = fork();
					if (pid == 0)
					{
						printf("==== I AM ABOUT TO EXEC_REDIRECTIONS 1\n");
						exec_redirections(cmds);
						write(STDOUT_FILENO, "=====TESTING BECAUSE PERPLEXITY WANTS 1\n", 41);
						char **cleaned = array_to_exec(cmds);
						exec_builtin(cleaned[0], cleaned);
						free_matrix(cleaned);
						exit(0);
					}
					waitpid(pid, NULL, 0);
				}
				else
					exec_builtin(cmds->cmd[0], cmds->cmd)/* , printf("SOOCBYDOO\n") */;
			}
			else
			{
				printf("=======NAO E BUILTIN\n");
				pid = fork();
				if (pid == 0)
				{
					printf("=======PID IGUAL A 0\n");
					if (has_redir(cmds))
						exec_redirections(cmds), write(STDOUT_FILENO, "======I EXEC_REDIRECT\n=====TESTING BECAUSE PERPLEXITY WANTS 2\n", 63);;
					char **cleaned = array_to_exec(cmds);
        			exec_path(cleaned[0], cleaned, envp);
        			free_matrix(cleaned);
					exit(1);
				}
				waitpid(pid, NULL, 0);
			}
		}
		else
			exec_tree(btree());
		free(input);
		binary_clear(btree());
	}
	return (printf("Closing Minishell\n"), 0);
}
#include "../sigma_minishell.h"
#include "jojo_libft/libft.h"

/* int	find_fd_red(char *str)
char **tokenization(char *str)
{
	int	ind;

	ind = 0;
	while(str[ind] >= '0' && str[ind] <= '9')
		ind++;
	if (str[ind] == '\0')
		return (0);
	if (str[ind] == '&')
	{
		
		ind++;
	}
	if (str[ind] == '>' && str[ind + 1] == '>')
		return (ind + 2);
	if (str[ind] == '>')
		return (ind + 1);
	return (0);
} */

int	find_tokens(char *str, t_token tokens)
{
	// if (ft_matnstr(tokens.qtokens, str, 4))
		// return (4);
	// if (ft_matnstr(tokens.ttokens, str, 3))
		// return (3);
	if (ft_matnstr(tokens.dtokens, str, 2))
		return (2);
	if (ft_matnstr(tokens.stokens, str, 1))
		return (1);
	return (0);
}

int	word_count(char *str, t_token tokens, char **sep)
{
	int		ind;
	int		count;
	int		token_found;
	char	*sep_found;

	ind  = 0;
	count = 0;
	while (str[ind])
	{
		while (str[ind] == ' ' || str[ind] == '\t' || str[ind] == '\n')
			ind++;
		if (str[ind] == '\0')
			return (count);
		token_found = find_tokens(str + ind, tokens);
		if (token_found)
		{
			// write(1, str + ind, token_found);
			// write(1, "\n", 1);
			count++;
			ind += token_found;
		}
		else if (find_tokens(str + ind, tokens) == 0 \
			&& str[ind] && (str[ind] != ' ' && str[ind] != '\t' && str[ind] != '\n'))
		{
			count++;
			while (find_tokens(str + ind, tokens) == 0 \
				&& str[ind] && (str[ind] != ' ' && str[ind] != '\t' && str[ind] != '\n'))
			{
				sep_found = ft_matnstr(sep, str + ind, 1);
				if (sep_found)
				{
					// write(1, str + ind, 1);
					ind++;
					while (str[ind] != *sep_found && str[ind])
					{
						// write(1, str + ind, 1);
						ind++;
					}
					if (str[ind] == '\0')
						return (-(*sep_found));
					// write(1, str + ind, 1);
					ind++;
				}
				else
				{
					// write(1, str + ind, 1);
					ind++;
				}
			}
			// write(1, "\n", 1);
		}
	}
	return (count);
}

static int	parsing_strlen(char *str, t_token tokens, char **sep)
{
	int		ind;
	int		token_found;
	char	*sep_found;

	ind  = 0;
	token_found = find_tokens(str + ind, tokens);
	if (token_found)
		return (token_found);
	else if (find_tokens(str + ind, tokens) == 0 \
		&& str[ind] && (str[ind] != ' ' && str[ind] != '\t' && str[ind] != '\n'))
	{
		while (find_tokens(str + ind, tokens) == 0 \
			&& str[ind] && (str[ind] != ' ' && str[ind] != '\t' && str[ind] != '\n'))
		{
			sep_found = ft_matnstr(sep, str + ind, 1);
			if (sep_found)
			{
				ind++;
				while (str[ind] != *sep_found && str[ind])
					ind++;
				if (str[ind] == '\0')
					return (-(*sep_found));
				ind++;
			}
			else
				ind++;
		}
		return (ind);
	}
	return (0);
}

char **tokenization(char *str, t_token tokens, char **sep)
{
	int		wc;
	int		ind;
	int		strcount;
	char	**ret;

	if (str == NULL || *str == '\0')
		return (NULL);
	wc = word_count(str, tokens, sep);
	if (wc < 0)
		return (printf("\nUnclosed |%c|\n", -wc), NULL);
	// QUANDO COLOCAS SINGLE QUOTES PROGRAMA NAO ENTRA NO > INPUT


	// printf("\nwords in the input ->|%d|\n", wc);
	ret = malloc(sizeof(char *) * (wc + 1));
	if (ret == NULL)
		return (NULL); // CLOSE PROGRAM INSTEAD OF RETURN NULL WHEN WE FIND MEMORY ERRORS?
	ret[wc] = NULL;
	ind = -1;
	while (++ind < wc)
	{
		while (*str == ' ' || *str == '\t' || *str == '\n')
			str++;
		if (*str == '\0')
			break ;
		strcount = parsing_strlen(str, tokens, sep);
		ret[ind] = ft_strndup(str, strcount);
		if (ret[ind] == NULL)
			return (ft_free_matrix(ret), NULL); // CLOSE PROGRAM INSTEAD OF RETURN NULL WHEN WE FIND MEMORY ERRORS?
		str += strcount;
	}
	// printf("========================================================\n");
	// ft_print_matrix(ret);
	// printf("========================================================\n");
 	return (ret);
}

void init_tree(char	**mat)
{
	btree()->sublvl = 0;
	btree()->type = EMPTY;
	btree()->left_ret = -1;
	btree()->right_ret = -1;
	btree()->subshell_ret = -1;
	btree()->cmds = NULL;
	btree()->up = NULL;
	btree()->left = NULL;
	btree()->right = NULL;
	btree()->subshell = NULL;
	btree()->mat = mat;
}

// output is:
// 	">>", "&>", ">&", "0>", "1>", "2>"
//	"0<>", "1<>", "2<>", "&>>", "0>>", "1>>", "2>>"
//	"0>&1", "1>&0", "0>&2", "2>&0", "1>&2", "2>&1"

// input is:
// 	"<<", "<", "<>" 



int	find_syntax(char *str, t_token tokens)
{
	if (ft_matnstr(tokens.dtokens, str, 2))
		return (2);
	if (ft_matnstr(tokens.stokens, str, 1))
		return (1);
	return (0);
}


/* int	check_syntax(char **mat, t_token tokens)
{
	int		ind;
	char	*token_found;
	char	*str;
	char	*stokens[] = {"&", "|", NULL};
	char	*dtokens[] = {"||", "&&", ">>", NULL};

	ind = 0;
	token_found = find_tokens(mat + ind, tokens);
	
} */

int	separator_count(char **mat)
{
	int	count;

	count = 0;
	while (*mat)
	{
		if (strncmp(*mat, "&", 2))
			count++;
		mat++;
	}
	return (count);
}
/* 
char	*dtokens[] = {"<>", "||", "&&", ">>", "<<", "&>", ">&", "0>", "1>", "2>", NULL};
char	*ttokens[] = {"0<>", "1<>", "2<>", "&>>", "0>>", "1>>", "2>>", NULL};
char	*qtokens[] = {"0>&1", "1>&0", / ignore left? /"0>&2", "2>&0", "1>&2", "2>&1", NULL};
tokens.ttokens = ttokens;
tokens.qtokens = qtokens;
 if (check_syntax(mat, tokens))
	 printf("wrongggggggg\n");
 else 
	 printf("rightttttttttt\n");
	 return (ft_free_matrix(mat), 1);
 */

int	sep_count(char **mat)
{
	int	count;

	count = 0;
	while (*mat)
	{
		if (ft_strncmp(*mat, "&", 2) == 0)
			count++;
		mat++;
	}
	return (count);
}

char	*expand_aux(char *str, int ind, int count)
{
	char	*temp;
	char	*env_var;

	temp = ft_strndup(str + ind + 1, count - 1);
	temp = ft_strjoin_free(temp, "=", 1);
	// printf("\nvar not expanded|%s|", temp);
	if (temp == NULL)
		return (free (str), NULL);
	env_var = ft_matnstr(btree()->env, temp, count);
	free(temp);
	if (env_var == NULL)
		env_var = ft_calloc(1, 1);
	if (env_var == NULL)
		return (free (str), NULL);
	// printf("\nvar expanded|%s|\n", env_var);
	temp = ft_strdup(str + ind + count);
	if (temp == NULL)
		return (free (str), NULL);
	// printf("str after var|%s|\n", str + ind + count);
	temp = ft_strjoin_free(env_var + count * (*env_var != '\0'), temp, 2);
	if (temp == NULL)
		return (free (str), NULL);
	str[ind] = '\0';
	str = ft_strjoin_free(str, temp, 0);
	// printf("str=|%s|", str);
	return (expand(str));
}

char	*expand(char *str)
{
	int		ind;
	int		count;

	if (str == NULL)
		return (NULL);
	ind = 0;
	count = 0;
	while (str[ind])
	{
		if (str[ind] == '\'' && ++ind)
			while (str[ind] != '\'')
				ind++;
		if (str[ind] == '$' && (ft_isalnum(str[ind + 1]) || str[ind + 1] == '?' || str[ind + 1] == '_'))
		{
			count++;
			if (str[ind + 1] == '?')
				return (expand_aux(str, ind, 2));
			while (ft_isalnum((str + ind)[count]) || (str + ind)[count] == '_')
				count++;
			return (expand_aux(str, ind, count));
		}
		ind++;
	}
	return (str);
}

void	get_here_doc(char *eof, int fd[2])
{
	char	*str;
	// char	strfinal[1024];
	int		len;

	len = ft_strlen(eof);
	str = readline("> ");
	while (ft_strncmp(str, eof, len + 1))
	{
		str = expand(str);
		write (fd[1], str, ft_strlen(str));
		write (fd[1], "\n", 1);
		free (str);
		str = readline("> ");
	}
	free (str);
	// read(fd[0], strfinal, 1023);
	// printf("%s", strfinal);
	close (fd[0]);
	close (fd[1]);
}
// "ola meu caro guerreiro $USER" is your true name '$USER' by any chance?

char	*quote(char *str)
{
	char	ch;
	int		ind;
	char	*ret;

	str = expand(str);
	ret = str;
	while (*str)
	{
		if (*str == '\"' || *str == '\'')
		{
			ind = 0;
			// printf("|%s|\n", str + ind);
			ch = str[ind];
			ind++;
			while (str[ind] != ch)
				ind++;
			// printf("%s\nto\n%s", str + ind, str + ind + 1);
			// printf("\n\nand\n\n%s\nto\n%s", str + ind, str + ind + 1);
			ft_memmove(str + ind, str + ind + 1, ft_strlen(str + ind));
			ft_memmove(str, str + 1, ft_strlen(str));

			// printf("\n\nstr goes from\n%s", str);
			str += ind - 1;
			// printf("\nto\n%s", str);
		}
		else
			str++;
	}
	return (ret);
}

// int	check_syntax(char **mat)
// {
// 
// }


// char	*wildcard(char *str, char **files)
// {
	// int		ind;
	// int		count;
	// char	*before;
// 
	// if (btree()->type == ERROR)
		// return (NULL);
	// ind = 0;
	// count = 0;
	// while (str[ind])
	// {
		// if (str[ind] == '*')
			// before = ft_strndup(str, ind);
		// ft_strnmat(files, before, ft_strndup);
	// }
	// return (NULL);
// }


int	parsing(char *str)
{
	char	*stokens[] = {"(", ")", "&", "|", ">", "<", NULL};
	char	*dtokens[] = {"||", "&&", ">>", "<<", NULL};
	char	*sep[] = {"'", "\"", "`", NULL};
	char 	**mat;
	t_token	tokens;

	if (str == NULL || *str == '\0')
		return (1);
	tokens.stokens = stokens;
	tokens.dtokens = dtokens;
	mat = tokenization(str, tokens, sep);
	// for (int i = 0; mat[i]; i++)
	// 	printf("====PARSING TESTING: Token[%d]: |%s|\n", i, mat[i]);
	/*if (check_syntax(mat))
		return (1);
		btree()->type = ERROR;*/
	if (mat == NULL)
		return (1);
	init_tree(mat);
	create_binary_tree(mat, separator_count(mat) + 1, btree());
	if (btree()->type == ERROR)
		return (binary_clear(btree()), 1);

	// printf("|%s|\n", str);
	// str = quote(str);
	// printf("\n|%s|\n", str);

	// printf("|%s|\n", str);
	// str = wildcard(str);
	// printf("\n|%s|\n", str);


	/*int		ind;
	int		len = ft_strlen(str);
	char	**matrix = btree()->env;

	ind = -1;
	while (matrix[++ind])
	{
		if (ft_strnstr(str, matrix[ind], len))
		{
			printf("\n\n|%s| and |%s| are the same %d\n", str, matrix[ind], ft_strncmp(str, matrix[ind], ft_strlen(str)));
			break ;
		}
		printf("|%s| and |%s| are not the same %d\n\n", str, matrix[ind], ft_strncmp(str, matrix[ind], ft_strlen(str)));
	}*/


	// int			fd[2];
// 
	// if (pipe(fd))
		// return (printf("error\n"));
	// get_here_doc(str, fd);
	return (0);
}

#include "../sigma_minishell.h"
#include "jojo_libft/libft.h"

void	binary_clear(t_binary *binary)
{
	if (binary == NULL)
		return ;
	binary_clear(binary->left);
	binary_clear(binary->right);
	binary_clear(binary->subshell);
	cmds_clear(binary->cmds);
	free(binary->mat);
	if (binary->up)
		free(binary);
}

void	cmds_clear(t_cmds *cmds)
{
	if (cmds == NULL)
		return ;
	cmds_clear(cmds->next);
	while (*(cmds->cmd))
	{
		free(*(cmds->cmd));
		cmds->cmd++;
	}
	outfile_clear(cmds->outfiles);
	free(cmds);
}

void	infile_clear(t_infile *infile)
{
	if (infile == NULL)
		return ;
	infile_clear(infile->next);
	free(infile->file);
	free(infile->token);
	free(infile);
}

void	outfile_clear(t_outfile *outfile)
{
	if (outfile == NULL)
		return ;
	outfile_clear(outfile->next);
	free(outfile->file);
	free(outfile->token);
	free(outfile);
}
#include "../sigma_minishell.h"
#include "jojo_libft/libft.h"

/* 
int	output_comp(char *str)
{
	if (strncmp(str, ">>", 3) == 0 || strncmp(str, "&>", 3) == 0\
		|| strncmp(str, "0>", 3) == 0 || strncmp(str, "1>", 3) == 0\
			|| strncmp(str, "2>", 3) == 0 || strncmp(str, ">&", 3) == 0)
					return (0);
	if (strncmp(str, "0<>", 4) == 0 || strncmp(str, "1<>", 4) == 0 \
		|| strncmp(str, "&>>", 4) == 0 || strncmp(str, "0>>", 4) == 0\
			|| strncmp(str, "1>>", 4) == 0 || strncmp(str, "2>>", 4) == 0\
				|| strncmp(str, "2<>", 4) == 0)\
						return (0);
	return (1);
}

int	input_comp(char *str)
{
	if (strncmp(str, "<<", 3) && strncmp(str, "<>", 3) && strncmp(str, "<", 2))
		return (1);
	return (0);
}
*/


/*
int redirect_comp(char *str)
{
	if (strncmp(str, "0>&1", 5) == 0 || strncmp(str, "1>&0", 5) == 0\
		|| strncmp(str, "2>&0", 5) == 0 || strncmp(str, "1>&2", 5) == 0\
			|| strncmp(str, "2>&1", 5) == 0 || strncmp(str, "0>&2", 5) == 0)
					return (0);
	return (1);
}

 output is:
	">>", "&>", ">&", "0>", "1>", "2>"
	"0<>", "1<>", "2<>", "&>>", "0>>", "1>>", "2>>"
	"0>&1", "1>&0", "0>&2", "2>&0", "1>&2", "2>&1"

input is:
	"<<", "<", "<>"
*/
int	separator_comp(char **mat, int flag)
{
	int	ind;
	int	pcount;

	ind = ft_matlen(mat) - 1;
	pcount = 0;
	if (flag == 1)
	{
		while (ind >= 0)
		{
			if (ft_strncmp(mat[ind], ")", 2) == 0)
			{
				pcount++;
				ind--;
				while (ind >= 0 && pcount)
				{
					if (ft_strncmp(mat[ind], ")", 2) == 0)
						pcount++;
					if (ft_strncmp(mat[ind], "(", 2) == 0)
						pcount--;
					ind--;
				}
			}
			if (ind >= 0 && (ft_strncmp(mat[ind], "&&", 3) == 0 || ft_strncmp(mat[ind], "||", 3) == 0))
				return (ind);
			ind--;
		}
	}
	else
	{
		while (ind-- > 0)
			if (ft_strncmp(mat[ind], "&", 2) == 0)
				return (ind);
	}
	return (0);
} 

int	input_comp(char *str)
{
	if (strncmp(str, "<<", 3) && strncmp(str, "<", 2))
		return (1);
	return (0);
}

int	output_comp(char *str)
{
	if (strncmp(str, ">>", 3) && strncmp(str, ">", 2))
		return (1);
	return (0);
}

t_infile	*get_infile(char **mat)
{
	t_infile	*infile;
	int			ind;

	if (btree()->type == ERROR || mat == NULL || *mat == NULL)
		return (NULL);
	ind = 0;
	while (mat[ind] && input_comp(mat[ind]))
		ind++;
	if (mat[ind] == NULL)
		return (NULL);
	infile = infile_new(mat[ind + 1], mat[ind]);
	if (infile == NULL)
	{
		btree()->type = ERROR;
		return (NULL);
	}
	mat[ind] = NULL;
	mat[ind + 1] = NULL;
	ft_matrix_uni(mat + ind, mat + ind + 2);
	infile->next = get_infile (mat + ind);
	return (infile);
}

t_outfile	*get_outfile(char **mat)
{
	t_outfile	*outfile;
	int			ind;

	if (btree()->type == ERROR || mat == NULL || *mat == NULL)
		return (NULL);
	ind = 0;
	// test if we really need ft_strncmp(mat[ind], "|", 2), I dont think we do
	while (mat[ind] && ft_strncmp(mat[ind], "|", 2) && output_comp(mat[ind]))
		ind++;
	if (mat[ind] == NULL || ft_strncmp(mat[ind], "|", 2) == 0)
		return (NULL);
	outfile = outfile_new(mat[ind + 1], mat[ind]);
	if (outfile == NULL)
	{
		btree()->type = ERROR;
		return (NULL);
	}
	mat[ind] = NULL;
	mat[ind + 1] = NULL;
	ft_matrix_uni(mat + ind, mat + ind + 2);
	outfile->next = get_outfile (mat + ind);
	return (outfile);
}

int	find_pipe(char **mat)
{
	int ind;

	ind = 0;
	while (mat[ind] && ft_strncmp(mat[ind], "|", 2))
		ind++;
	return ((mat[ind] == NULL) * -1 + (mat[ind] != NULL) * ind);
}

void	print_files(t_infile	*file)
{
	while (file)
	{
		printf("red is | file is\n");
		printf("%s       %s\n", file->token, file->file);
		file = file->next;
	}
}

t_cmds	*get_cmds(char **mat)
{
	t_cmds	*cmds;
	int		sep;

	if (mat == NULL || *mat == NULL)
		return (NULL);
	sep = find_pipe(mat);
	if (sep != -1)
	{
		free(mat[sep]);
		mat[sep] = NULL;
	}
	cmds = cmds_new(get_outfile(mat), get_infile(mat), mat);
	if (sep != -1)
		cmds->next = get_cmds(mat + sep + 1);
	return (cmds);
}

// in < cat | cat & echo done & echo ola
// in < cat | cat & echo done &


void	create_binary_tree(char **mat, int	shlvl, t_binary *tree)
{
	int	sub;

	if (btree()->type == ERROR || mat == NULL || *mat == NULL)
		return ;
	sub = separator_comp(mat, 0);
	if (sub)
	{
		free(mat[sub]);
		mat[sub] = NULL;
		tree->subshell = binary_new(shlvl - 1, EMPTY, tree, NULL);
		if (tree->subshell == NULL)
		{
			btree()->type = ERROR;
			return ;
		}
		create_binary_tree (mat, shlvl - 1, tree->subshell);
		if (btree()->type == ERROR)
			return ;
		mat += sub + 1;
	}
	// ft_print_matrix(mat);
	// printf("^===============================================================^\n");
	create_binary_lvl(mat, shlvl, tree);
}

int	open_parethesis(char **mat)
{
	int	ind;
	int	pcount;

	ind = 0;
	pcount = 0;
	if (ft_strncmp(mat[ind], "(", 2) == 0)
	{
		pcount++;
		while (pcount && mat[++ind])
		{
			if (ft_strncmp(mat[ind], "(", 2) == 0)
				pcount++;
			if (ft_strncmp(mat[ind], ")", 2) == 0)
				pcount--;
		}
		if (pcount == 0 && mat[ind + 1] == NULL)
		{
			free (*mat);
			free (mat[ind]);
			*mat = NULL;
			mat[ind] = NULL;
			return (1);
		}
	}
	return (0);
}

void    print_thiscmds(t_cmds *cmds)
{
    while (cmds)
    {
        // printf("===============================================================\n");
        printf("starts commands\n\n");
        ft_print_matrix(cmds->cmd);
        printf("end commands\n\n");
        printf("starts outfiles\n\n");
        print_files((t_infile *)cmds->outfiles);
        printf("end outfiles\n");
        // printf("===============================================================\n\n");
        cmds = cmds->next;
    }
}

// int	check_syntax(char **mat)
// {
	// if ()
	// return (0);
// }

void	create_binary_lvl(char **mat, int id, t_binary *tree)
{
	int			sep;

	if (btree()->type == ERROR || mat == NULL || *mat == NULL)
	{
		if (tree->up != NULL)
			free(tree);
		return ;
	}
	mat += open_parethesis(mat);
	// ft_print_matrix(mat);
	// if (check_syntax(mat))
		// btree()->type = ERROR;
	if (btree()->type == ERROR)
		return ;
	sep = separator_comp(mat, 1);
	if (sep == 0)
	{
		tree->cmds = get_cmds(mat);
		return ;
	}
	tree->left = binary_new(id ,EMPTY, tree, NULL);
	if (tree->left == NULL)
	{
		btree()->type = ERROR;
		return ;
	}
	tree->right = binary_new(id ,EMPTY, tree, NULL);
	if (tree->right == NULL)
	{
		btree()->type = ERROR;
		return ;
	}
	if (ft_strncmp(mat[sep], "&&", 3) == 0)
		tree->type = AND;
	else
		tree->type = OR;
	free (mat[sep]);
	mat[sep] = NULL;
	// printf("\t\t\tLEFT\n");
	create_binary_lvl (mat, 1, tree->left);
	// printf("\t\t\tRIGHT\n");
	create_binary_lvl (mat + sep + 1, 1, tree->right);
}

#include "../sigma_minishell.h"
#include "jojo_libft/libft.h"

t_outfile	*outfile_new(char *file, char *token)
{
	t_outfile	*new;

	new = malloc(sizeof(t_outfile));
	new->file = file;
	new->token = token;
	new->next = NULL;
	return (new);
}

t_infile	*infile_new(char *file, char *token)
{
	t_infile	*new;

	new = malloc(sizeof(t_infile));
	new->file = file;
	new->token = token;
	new->next = NULL;
	return (new);
}

t_cmds	*cmds_new(t_outfile *outfile, t_infile *infile, char **cmd)
{
	t_cmds	*new;

	new = malloc(sizeof(t_cmds));
	new->cmd = cmd;
	new->outfiles = outfile;
	new->infiles = infile;
	new->next = NULL;
	return (new);
}

t_binary	*binary_new(int shlvl, t_type type, t_binary *up, t_cmds *cmds)
{
	t_binary	*new;

	new = malloc(sizeof(t_binary));
	if (new == NULL)
		return (NULL);
	new->type = type;
	new->sublvl = shlvl;
	new->left_ret = -1;
	new->right_ret = -1;
	new->subshell_ret = -1;
	new->cmds = cmds;
	new->up = up;
	new->left = NULL;
	new->right = NULL;
	new->subshell = NULL;
	new->mat = NULL;
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:22:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:11 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*ret;
	size_t	count;
	size_t	s_len;

	if (s == NULL)
		return (NULL);
	s_len = ft_strlen((char *)s);
	if (s_len < start)
		return (ft_calloc(1, 1));
	count = -1;
	if (len > s_len - start)
		ret = (char *)ft_calloc(s_len - start + 1, 1);
	else
		ret = (char *)ft_calloc(len + 1, 1);
	if (ret == NULL)
		return (NULL);
	while (++count < len && s[start + count])
		ret[count] = s[start + count];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_wrdchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/21 16:40:04 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/21 16:40:46 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_wrdchr(const char *s, int c)
{
	char	*temp;

	temp = (char *)s;
	while (*temp != (char)c && *temp && *temp != ' ')
		temp++;
	if (*temp == (char)c)
		return (temp);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:44:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (2048);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:21:27 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:56 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void*))
{
	t_list		*temp;
	int			count;
	int			sub_count;

	if (lst == NULL || *lst == NULL || del == NULL)
		return ;
	count = ft_lstsize (*lst);
	while (count-- > 0)
	{
		temp = *lst;
		sub_count = count;
		while (sub_count-- > 0)
			temp = temp->next;
		ft_lstdelone(temp, del);
	}
	*lst = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/22 12:14:12 by jlima-so          #+#    #+#             */
/*   Updated: 2025/07/25 15:17:49 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_atoi(const char *str)
{
	int	sign;
	int	num;

	sign = 1;
	num = 0;
	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	if (*str == '+' || *str == '-')
	{
		if (*str == '-')
			sign = -sign;
		str++;
	}
	while (*str >= '0' && *str <= '9')
	{
		num = num * 10 + (*str - 48) * (sign);
		str++;
	}
	return (num);
}

// int main()
// {
// 	char * str = "  \n\t\v\r2147483648";
// 	printf("Og return %d\n", atoi(str));
// 	printf("My return %d", ft_atoi(str));		

// }
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 18:59:24 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:14 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		c = c + 32;
	return (c);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:18:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:07:01 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	size_t	ind;

	ind = -1;
	if (dest > src)
		while (n-- > 0)
			((char *)dest)[n] = ((char *)src)[n];
	else
		while (++ind < n)
			((char *)dest)[ind] = ((char *)src)[ind];
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:07:57 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:26 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_lstsize(t_list *lst)
{
	int	size;

	size = 0;
	while (lst != NULL)
	{
		size++;
		lst = lst->next;
	}
	return (size);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 13:50:55 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:54 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_str_count(char *str, char c)
{
	int	ind;
	int	count;

	count = 0;
	ind = 0;
	while (str[ind])
	{
		if (str[ind] != c && (str[ind + 1] == '\0'
				|| str[ind + 1] == c))
			count++;
		ind++;
	}
	return (count);
}

static char	*ft_split_strndup(const char *s, char c)
{
	char	*src;
	char	*dest;
	int		size;

	size = 0;
	while (s[size])
	{
		if (s[size] == c)
			break ;
		size++;
	}
	if (s == NULL)
		return (NULL);
	src = (char *)s;
	dest = ft_calloc(size + 1, 1);
	if (dest == NULL)
		return (NULL);
	ft_bzero(dest, size + 1);
	dest = ft_memcpy(dest, src, size);
	return (dest);
}

static void	*free_all(char **strs, int count)
{
	int	ind;

	ind = -1;
	while (++ind < count)
		free (strs[ind]);
	free (strs);
	return (NULL);
}

static char	**alloc_mem(int str_count)
{
	char	**ret;

	ret = ft_calloc((str_count + 1) * sizeof(char *), 1);
	if (ret == NULL)
		return (NULL);
	ret[str_count] = NULL;
	return (ret);
}

char	**ft_split(char const *s, char c)
{
	char	**ret;
	char	*str;
	int		str_count;
	int		indv;

	if (s == NULL)
		return (NULL);
	indv = 0;
	str = (char *)s;
	str_count = ft_str_count(str, c);
	ret = alloc_mem(str_count);
	if (ret == NULL)
		return (NULL);
	while (str_count-- > 0)
	{
		while (*str == c && *str)
			str++;
		ret[indv] = ft_split_strndup(str, c);
		if (ret[indv] == NULL && indv != str_count)
			return (free_all(ret, indv));
		indv++;
		while (*str != c && *str)
			str++;
	}
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:32:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/18 18:13:24 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*ret;

	if (s1 == NULL && s2 == NULL)
		return (NULL);
	if (s1 == NULL)
		return (ft_strdup(s2));
	if (s2 == NULL)
		return (ft_strdup(s1));
	ret = ft_calloc(ft_strlen((char *)s1) + ft_strlen((char *)s2) + 1, 1);
	if (ret == NULL)
		return (NULL);
	ret = ft_strcpy(ret, (char *)s1);
	ret = ft_strcat(ret, (char *)s2);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:27:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:39 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	if (-9 < n && n < 0)
		write (fd, "-", 1);
	if (n < -9 || n > 9)
		ft_putnbr_fd(n / 10, fd);
	n = (n % 10) * ((n > 0) - (n < 0)) + 48;
	write (fd, &n, 1);
}
// int main()
// {
// 	ft_putnbr_fd(-2147483648, 1);
// }/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_split.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 19:06:25 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/20 06:39:52 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	real_wrd_count(char *str, int ind, int count)
{
	while (*str)
	{
		ind = 0;
		while (*str && *str == ' ')
			str++;
		if (*str && *str != '\'')
		{
			while (*str && *str != ' ' && *str != '\'')
				str++;
			count++;
		}
		if (*str && *str == '\'')
		{
			str++;
			while (*str && *str != '\'')
			{
				str++;
				ind = 1;
			}
			if (ind)
				count++;
			str++;
		}
	}
	return (count);
}

static int	wrd_count(char *str)
{
	int	ind;
	int	count;

	if (str == NULL)
		return (0);
	ind = -1;
	count = 0;
	while (str[++ind])
		if (str[ind] == '\'')
			count++;
	if (count % 2)
		return (0);
	count = real_wrd_count(str, ind, 0);
	return (count);
}

static int	next_str(char *str)
{
	int	ind;
	int	space;

	space = 0;
	ind = 0;
	if (str[ind] != '\'')
		while (str[ind] && str[ind] != ' ' && str[ind] != '\'')
			ind++;
	else if (str[ind] == '\'' && str[ind++])
	{
		while (str[ind] != '\'' && str[ind])
		{
			if (space == -1 && str[ind] == ' ')
				space = ind;
			ind++;
		}
		ind++;
		if (str[ind - 1] != '\'')
			ind = space;
	}
	return (ind);
}

static	char	**create_empty_mat(void)
{
	char	**ret;

	ret = malloc(2 * sizeof(char *));
	ret[1] = NULL;
	ret[0] = malloc(1);
	ret[0][0] = '\0';
	return (ret);
}

char	**pipex_split(char *str, char **ret, int count, int loop)
{
	int	ind;

	if (count == 0)
		count = wrd_count(str);
	if (count == 0)
		return (create_empty_mat());
	if (ret == NULL && loop == 0)
		ret = malloc((count + 1) * sizeof(char *));
	if (ret == NULL && loop == 0)
		return (NULL);
	ret[count - loop] = NULL;
	if (count == loop)
		return (ret);
	while (*str == ' ' && str)
		str++;
	ind = next_str(str) - ((*str == '\''));
	str += (*str == '\'');
	*ret = ft_strndup(str, ind - (ind - 1 > 0 && (str[ind - 1] == '\'')));
	if (*ret == NULL)
		return (ft_free_matrix_count(ret - loop, loop), NULL);
	while (*str == ' ' && str)
		str++;
	pipex_split (str + ind, ret + 1, count, loop + 1);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcat.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:43:03 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:58 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strcat(char *dest, char *src)
{
	int	ind;
	int	ind2;

	if (dest == NULL)
		return (NULL);
	ind = -1;
	ind2 = ft_strlen(dest);
	if (src == NULL)
		return (dest);
	while (src[++ind] != '\0')
		dest[ind2++] = src[ind];
	dest[ind2] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:35:53 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:31 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1024);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_free_matrix.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:46:11 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:22 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_free_matrix(char **matrix)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		free(matrix[ind]);
	free (matrix);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:58:22 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:15 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*ret;
	size_t	ind;

	ind = -1;
	if (nmemb == 0 || size == 0 || ind / nmemb >= size)
	{
		ret = malloc(size * nmemb);
		if (ret == NULL)
			return (0);
		ind = 0;
		ft_bzero(ret, size * nmemb);
		return (ret);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strndup.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 19:03:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strndup(char *str, int ind)
{
	char	*ret;

	if (str == NULL)
		return (NULL);
	ret = ft_calloc (ind + 1, 1);
	while (ind--)
		ret[ind] = str[ind];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:20:24 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:34 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	unsigned char	*str;
	unsigned char	chr;

	str = (unsigned char *)s;
	chr = (unsigned char)c;
	while (n-- > 0)
	{
		if (*str == chr)
			return (str);
		str++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 13:53:00 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strdup(const char *s)
{
	char	*src;
	char	*dest;
	int		size;

	src = (char *)s;
	size = ft_strlen(src);
	dest = ft_calloc(size + 1, 1);
	if (dest == NULL)
		return (NULL);
	dest = ft_memcpy(dest, src, size);
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:01:11 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	int		ind;
	char	*ret;

	if (s == NULL || f == NULL)
		return (NULL);
	ret = (char *)ft_calloc(ft_strlen((char *)s) + 1, 1);
	if (ret == NULL)
		return (NULL);
	ind = -1;
	while (s[++ind])
		ret[ind] = f(ind, s[ind]);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:58:30 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 12:47:33 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t			ind;
	unsigned char	*str1;
	unsigned char	*str2;

	if (n == 0)
		return (1);
	str1 = (unsigned char *)s1;
	str2 = (unsigned char *)s2;
	ind = 0;
	while (str1[ind] && str2[ind] && str1[ind] == str2[ind] && ind < n - 1)
		ind++;
	return (str1[ind] - str2[ind]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 14:50:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:55 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t	ind;

	ind = -1;
	while (++ind < n)
		((char *)dest)[ind] = ((char *)src)[ind];
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmat.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 15:20:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:40 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strmat(char **matrix, char *s)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strstr(matrix[ind], s))
			return (matrix[ind]);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 15:09:25 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_nrblrn(int nbr)
{
	int	len;

	len = 1;
	while (-9 > nbr || nbr > 9)
	{
		nbr = nbr / 10;
		len++;
	}
	return (len);
}

char	*ft_itoa(int n)
{
	char	*ret;
	int		size;

	size = ft_nrblrn(n);
	if (n >= 0)
		ret = ft_calloc (size + 1, 1);
	else
		ret = ft_calloc (size + 2, 1);
	if (ret == NULL)
		return (NULL);
	if (n < 0)
	{
		ret[0] = '-';
		ret[size] = -(n % 10) + 48;
		n = -(n / 10);
	}
	while (--size >= 0 && ret[size] != '-')
	{
		ret[size] = n % 10 + 48;
		n = n / 10;
	}
	return (ret);
}
/* 
int main()
{
	printf("\n ft_itoa:\n");
// 
	printf("\t%s\n", ft_itoa(-123456));
	printf("\t%s\n", ft_itoa(-2147483648));
	printf("\t%s\n", ft_itoa(2147483647));
	printf("\t%s\n", ft_itoa(10));
	printf("\t%s\n", ft_itoa(0));	
} *//* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:12:05 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:48 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*temp;

	if (lst == NULL || new == NULL)
		return ;
	if (*lst == NULL)
		*lst = new;
	else
	{
		temp = *lst;
		while (temp->next != NULL)
			temp = temp->next;
		temp->next = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_print_matrix.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:21:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/19 12:53:31 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_print_matrix.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 13:52:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/06 13:52:38 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_print_matrix(char **matrix)
{
	int	indv;
	int	indh;

	if (matrix == NULL)
		return ;
	indv = -1;
	while (matrix[++indv])
	{
		indh = -1;
		while (matrix[indv][++indh])
			write(2, &matrix[indv][indh], 1);
		write(2, " ", 1);
	}
	write(2, "\n", 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_matlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 18:49:50 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:28 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_matlen(char **mat)
{
	int	ind;

	if (mat == NULL)
		return (0);
	ind = 0;
	while (mat[ind])
		ind++;
	return (ind);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnmat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 07:29:57 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/18 16:21:37 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_matnstr(char **matrix, char *s, int n)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strnstr(s, matrix[ind], n))
			return (matrix[ind]);
	return (NULL);
}

/* char	*ft_strnstr(char **matrix, char *s, int n)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strncmp(s, matrix[ind], n) == 0)
			return (matrix[ind]);
	return (NULL);
}
 *//* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:44:33 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:25 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isalnum(int c)
{
	if (ft_isdigit(c) || ft_isalpha(c))
		return (8);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:14:19 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:45 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	if (s != NULL)
	{
		write(fd, s, ft_strlen(s));
		write(fd, "\n", 1);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 22:18:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:07 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

static int	ft_check(char ch, const char *charset)
{
	int	ind;

	ind = 0;
	while (charset[ind])
	{
		if (charset[ind] == ch)
			return (1);
		ind++;
	}
	return (0);
}

static int	total_len(const char *str, const char *set)
{
	int	ind;
	int	total;

	total = 0;
	ind = -1;
	while (str[++ind] && ft_check (str[ind], set))
		total++;
	if (str[ind] == '\0')
		return (total);
	ind = ft_strlen(str);
	while (--ind >= 0 && ft_check (str[ind], set))
		total++;
	return (total);
}

char	*ft_strtrim(char const *s1, char const *set)
{
	int		ind;
	int		ind2;
	int		total;
	char	*ret;

	ind = 0;
	ind2 = 0;
	if (s1 == NULL)
		return (NULL);
	if (set == NULL)
		return (ft_strdup((char *)s1));
	total = ft_strlen(s1) - total_len(s1, set);
	ret = ft_calloc(total + 1, 1);
	if (ret == NULL)
		return (NULL);
	while (ft_check(s1[ind], (char *)set) && s1[ind])
		ind++;
	while (s1[ind] && ind2 < total)
		ret[ind2++] = s1[ind++];
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 18:57:50 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:33:26 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		c = c - 32;
	return (c);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:08:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:04 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strrchr(const char *s, int c)
{
	int		ind;

	ind = ft_strlen((char *)s) + 1;
	while (ind-- > 0)
		if (s[ind] == (char)c)
			return ((char *)s + ind);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin_free.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 21:32:36 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/18 11:55:15 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strjoin_free(char *s1, char *s2, int flag)
{
	char	*ret;

	ret = ft_calloc(ft_strlen((char *)s1) + ft_strlen((char *)s2) + 1, 1);
	if (ret == NULL)
		return (free (s2), free (s1), NULL);
	ret = ft_strcpy(ret, (char *)s1);
	ret = ft_strcat(ret, (char *)s2);
	if (flag != 2)
		free (s1);
	if (flag != 1)
		free (s2);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isminishell.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:44:33 by jlima-so          #+#    #+#             */
/*   Updated: 2025/07/25 16:53:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isminishell(int c)
{
	if (ft_isalpha(c) || c == 33 || c == 35 || c == 37 || (c >= 42 && c <= 59) || c == 63 || c == 64) 
		return (8);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_matnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 07:29:57 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/18 20:43:16 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_matnstr(char **matrix, char *s, int n)
{
	int	ind;

	ind = -1;
	while (matrix[++ind])
		if (ft_strncmp(s, matrix[ind], n) == 0)
			return (matrix[ind]);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:12:59 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 14:50:39 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	if (s != NULL)
	{
		write(fd, s, ft_strlen(s));
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 14:43:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strcpy(char *dest, char *src)
{
	int	ind;

	if (dest == NULL)
		return (NULL);
	if (src == NULL)
		return (dest);
	ind = -1;
	while (src[++ind] != '\0')
		dest[ind] = src[ind];
	dest[ind] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strstr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:28:40 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:05 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strstr(const char *big, const char *little)
{
	size_t	indl;
	size_t	indb;

	indb = 0;
	if (big == NULL || little == NULL)
		return (NULL);
	if (*little == '\0')
		return ((char *)big);
	while (big[indb])
	{
		indl = 0;
		while (big[indb + indl] == little[indl])
		{
			indl++;
			if (little[indl] == '\0')
				return ((char *)big + indb);
		}
		indb++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:07:18 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_striteri(char const *s, void (*f)(unsigned int, char *))
{
	int		ind;
	char	*str;

	if (s != NULL && f != NULL)
	{
		str = (char *)s;
		ind = -1;
		while (str[++ind])
			f(ind, str + ind);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:54:26 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:49:24 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_bzero(void *s, size_t n)
{
	while (n-- > 0)
		((char *)s)[n] = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_free_matrix_count.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/09 18:54:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_free_matrix_count(char **mat, int count)
{
	if (mat == NULL)
		return ;
	while (count--)
		free (mat[count]);
	free(mat);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:49:26 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:41 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (16384);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 19:05:05 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:04 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strchr(const char *s, int c)
{
	char	*temp;

	temp = (char *)s;
	while (*temp != (char)c && *temp)
		temp++;
	if (*temp == (char)c)
		return (temp);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:29:20 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:19 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*ret;
	t_list	*temp;

	if (lst == NULL || f == NULL || del == NULL)
		return (NULL);
	ret = ft_lstnew(f(lst->content));
	if (ret == NULL)
		return (NULL);
	lst = lst->next;
	while (lst != NULL)
	{
		temp = ft_lstnew(f(lst->content));
		if (temp == NULL)
		{
			ft_lstclear (&ret, del);
			return (NULL);
		}
		ft_lstadd_back(&ret, temp);
		lst = lst->next;
	}
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:27:10 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (lst == NULL || f == NULL)
		return ;
	while (lst != NULL)
	{
		f(lst->content);
		lst = lst->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:12:23 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:09:29 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 14:12:15 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:07:06 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	*ft_memset(void *s, int c, size_t n)
{
	while (n-- > 0)
		((char *)s)[n] = c;
	return (s);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 16:12:29 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:30 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	ind;
	size_t	dst_len;
	size_t	src_len;

	src_len = ft_strlen(src);
	if (size == 0)
		return (src_len + size);
	dst_len = ft_strlen(dst);
	if (dst_len >= size)
		return (src_len + size);
	ind = 0;
	while (ind + dst_len < size - 1 && src[ind])
	{
		dst[dst_len + ind] = src[ind];
		ind++;
	}
	dst[dst_len + ind] = '\0';
	return (src_len + dst_len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:48:47 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:35 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:01:27 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:05:53 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (lst == NULL || new == NULL)
		return ;
	if (*lst == NULL)
		*lst = new;
	else
	{
		new->next = *lst;
		*lst = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 13:52:31 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:35 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlen(const char *s)
{
	size_t	ind;

	ind = 0;
	if (s)
		while (s[ind])
			ind++;
	return (ind);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:57:41 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*new;

	new = malloc(sizeof(t_list));
	if (new == NULL)
		return (NULL);
	new->content = content;
	new->next = NULL;
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:15:44 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:01 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void*))
{
	if (lst == NULL || del == NULL)
		return ;
	del(lst->content);
	free(lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:59:16 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:10:32 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t size)
{
	size_t	ind;
	size_t	ret;

	ind = 0;
	ret = (ft_strlen((char *)src));
	if (size == 0)
		return (ret);
	while (ind < size - 1 && src[ind])
	{
		dst[ind] = src[ind];
		ind++;
	}
	dst[ind] = '\0';
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 17:11:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:16 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (lst == NULL)
		return (NULL);
	while (lst->next != NULL)
		lst = lst->next;
	return (lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:28:40 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:11:00 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	indl;
	size_t	indb;

	indb = 0;
	if (*little == '\0')
		return ((char *)big);
	if (len == 0)
		return (NULL);
	while (big[indb] && indb < len)
	{
		indl = 0;
		while (big[indb + indl] == little[indl] && indb + indl < len)
		{
			indl++;
			if (little[indl] == '\0')
				return ((char *)big + indb);
		}
		indb++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_matrix_unify.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/10 20:36:54 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/11 19:55:03 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

void	ft_matrix_uni(char **dest, char **src)
{
	int	ind;

	if (src == NULL || dest == NULL)
		return;
	ind = -1;
	while (src[++ind])
		dest[ind] = src[ind];
	dest[ind] = src[ind];
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 20:26:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/11 09:06:50 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	ft_memcmp(const void *str1, const void *str2, size_t n)
{
	size_t			ind;
	unsigned char	*s1;
	unsigned char	*s2;

	s1 = (unsigned char *)str1;
	s2 = (unsigned char *)str2;
	ind = 0;
	if (n == 0)
		return (0);
	while (s1[ind] == s2[ind] && ind < n - 1)
		ind++;
	return (s1[ind] - s2[ind]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_emptstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42lisba.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 11:40:58 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/24 11:42:23 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_emptystr(const char *str)
{
	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	return (*str == '\0');
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/24 15:02:51 by jlima-so          #+#    #+#             */
/*   Updated: 2025/08/11 20:11:05 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include "get_next_line/get_next_line_bonus.h"
# include <stdlib.h>
# include <unistd.h>
# include <stdio.h>
# include <limits.h>
# include <ctype.h>
# include <string.h>
// # include <bsd/string.h>
# include <errno.h>
# include <fcntl.h>
# include <sys/wait.h>
# include <sys/types.h>

typedef struct s_exec
{
	char	*path;
	char	**cmd;
	char	*str;
	int		ind;
	int		check;
	char	**mat;
}				t_exec;

typedef struct s_main
{
	int	fd;
	int	fd2[2];
	int	id;
	int	ind;
}	t_main;

typedef struct s_pipex
{
	int	fd[3];
	int	id;
	int	ind;
}	t_pipex;

void	ft_matrix_uni(char **dest, char **src);
char	*ft_itoa(int n);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strrchr(const char *s, int c);
char	*ft_strtrim(char const *s1, char const *set);
char	*ft_strnstr(const char *big, const char *little, size_t len);
char	*ft_strstr(const char *big, const char *little);
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
char	*ft_strjoin(char const *s1, char const *s2);
char	*ft_strdup(const char *s);
char	**ft_split(char const *s, char c);
char	*ft_strchr(const char *s, int c);
void	*ft_memset(void *s, int c, size_t n);
void	*ft_memcpy(void *dest, const void *src, size_t n);
void	*ft_memmove(void *dest, const void *src, size_t n);
void	*ft_memchr(const void *s, int c, size_t n);
void	ft_bzero(void *s, size_t n);
void	ft_putstr_fd(char *s, int fd);
void	ft_putendl_fd(char *s, int fd);
void	ft_putnbr_fd(int n, int fd);
void	ft_putchar_fd(char c, int fd);
void	*ft_calloc(size_t nmemb, size_t size);
size_t	ft_strlen(const char *s);
size_t	ft_strlcpy(char *dst, const char *src, size_t size);
size_t	ft_strlcat(char *dst, const char *src, size_t size);
void	ft_striteri(char const *s, void (*f)(unsigned int, char*));
int		ft_memcmp(const void *str1, const void *str2, size_t n);
int		ft_isprint(int c);
int		ft_isdigit(int c);
int		ft_isascii(int c);
int		ft_isalpha(int c);
int		ft_tolower(int c);
int		ft_toupper(int c);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
int		ft_isalnum(int c);
int		ft_atoi(const char *str);
void	ft_print_matrix(char **matrix);
void	ft_free_matrix(char **matrix);
void	ft_free_matrix_count(char **mat, int count);
char	*ft_strcat(char *dest, char *src);
char	*ft_strcpy(char *dest, char *src);
char	*ft_strnmat(char **matrix, char *s, int n);
char	*ft_strmat(char **matrix, char *s);
char	*ft_strjoin_free(char *s1, char *s2, int flag);
int		ft_matlen(char **mat);
char	*ft_strndup(char *str, int ind);
char	**pipex_split(char *str, char **ret, int count, int loop);
int		pipe_into_pipe(char *av, char **env, int *fd, int to_close);
int		feed_file_into_pipe(int *fd, char **av, int to_close);
int		check_input(int *ac, char ***av, char **env);
int		check_one_cmd(char *str, char **env, char **cmd, int value);
void	rdwr_frm_int_fd(char *cmd_path_inc, char **env, int rd, int wr);
char	*ft_wrdchr(const char *s, int c);
int		ft_emptystr(const char *str);

typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}				t_list;

void	ft_lstadd_front(t_list **lst, t_list *new);
void	ft_lstadd_back(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void*));
void	ft_lstiter(t_list *lst, void (*f)(void *));
t_list	*ft_lstnew(void *content);
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *),
			void (*del)(void *));
t_list	*ft_lstlast(t_list *lst);
int		ft_lstsize(t_list *lst);
void	ft_lstdelone(t_list *lst, void (*del)(void*));
void	adeus(void *content);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils_bonus.c                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 10:42:14 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/12 12:35:10 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

int	zero_read(int fd, char *keep)
{
	int	ind;

	ind = read(fd, keep, BUFFER_SIZE);
	if (ind >= 0)
		keep[ind] = '\0';
	return (ind);
}

void	next_lines(char *ret)
{
	int	ind;
	int	add;

	add = ft_gnl_strlen(ret);
	ind = 0;
	while (ret[ind + add] && ret[ind])
	{
		ret[ind] = ret[ind + add];
		ind++;
	}
	if (ret[ind + add] == '\0')
		ret[ind] = '\0';
}

int	ft_gnl_strlen(char *str)
{
	int	ind;

	ind = 0;
	while (str[ind])
	{
		ind++;
		if (str[ind - 1] == '\n')
			return (ind);
	}
	return (ind);
}

char	*ft_gln_strjoin(char *s1, char *s2)
{
	char	*ret;
	int		ind;

	if (s1 == NULL)
	{
		s1 = malloc (1);
		s1[0] = '\0';
	}
	ret = malloc (ft_gnl_strlen(s1) + ft_gnl_strlen(s2) + 1);
	if (ret == NULL)
		return (free (s1), NULL);
	ind = -1;
	while (s1[++ind])
		ret[ind] = s1[ind];
	free (s1);
	while (*s2)
	{
		ret[ind] = *(s2);
		ind++;
		s2++;
		if (*(s2 - 1) == '\n')
			break ;
	}
	ret[ind] = '\0';
	return (ret);
}

int	check(char *str)
{
	while (*str)
	{
		if (*str == '\n')
			return (0);
		str++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.h                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 09:20:52 by jlima-so          #+#    #+#             */
/*   Updated: 2025/06/06 16:35:00 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef GET_NEXT_LINE_BONUS_H
# define GET_NEXT_LINE_BONUS_H

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 42
# endif

# include <limits.h> 
# include <fcntl.h> 
# include <unistd.h>
# include <stdio.h>
# include <stdlib.h>

char	*get_next_line(int fd);
char	*ft_gln_strjoin(char *s1, char *s2);
int		zero_read(int fd, char *keep);
void	next_lines(char *ret);
int		ft_gnl_strlen(char *str);
int		check(char *str);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jlima-so <jlima-so@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 09:20:43 by jlima-so          #+#    #+#             */
/*   Updated: 2025/07/25 15:18:03 by jlima-so         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft.h"

char	*get_next_line(int fd)
{
	static char	keep[FOPEN_MAX][BUFFER_SIZE + 1];
	char		*ret;
	int			i;

	if (BUFFER_SIZE <= 0 || fd >= FOPEN_MAX || fd < 0)
		return (NULL);
	i = 1;
	if (*keep[fd] == '\0')
		i = zero_read(fd, keep[fd]);
	if (i < 1 && (*keep[fd] == '\0' || !check(keep[fd])))
		return (NULL);
	ret = ft_gln_strjoin(NULL, keep[fd]);
	if (ret == NULL)
		return (NULL);
	while (i && check(ret))
	{
		i = zero_read(fd, keep[fd]);
		if (i < 1)
			break ;
		ret = ft_gln_strjoin(ret, keep[fd]);
		if (ret == NULL)
			return (NULL);
	}
	next_lines(keep[fd]);
	return (ret);
}
